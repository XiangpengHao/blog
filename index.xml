<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Xiangpeng&#39;s blog</title>
<link>https://blog.haoxp.xyz/</link>
<atom:link href="https://blog.haoxp.xyz/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Sun, 27 Oct 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>Caching in DataFusion</title>
  <dc:creator>Xiangpeng Hao</dc:creator>
  <link>https://blog.haoxp.xyz/posts/caching-datafusion/</link>
  <description><![CDATA[ 





<p>Note: my research is <a href="https://haoxp.xyz/fund/">funded</a> by <a href="https://www.influxdata.com">InfluxData</a>, which made this blog post possible.</p>
<hr>
<p>In the <a href="../../posts/parquet-to-arrow/">last post</a>, we discussed how DataFusion prunes Parquet files to read only the necessary data. This post explores DataFusion’s caching mechanisms, which help avoid repeating reads to object storage.</p>
<section id="current-state" class="level2">
<h2 class="anchored" data-anchor-id="current-state">Current state</h2>
<p>DataFusion provides a flexible and layered caching architecture that enables developers to optimize data access at multiple levels. The caching system is designed to be extensible, allowing custom implementations while providing sensible defaults. Let’s examine the built-in caching mechanisms that make DataFusion efficient.</p>
<section id="list-files-cache" class="level4">
<h4 class="anchored" data-anchor-id="list-files-cache">1. List files cache</h4>
<p>The <a href="https://github.com/apache/datafusion/blob/5db274004bc4a7d493aba6764a8521694a67cd11/datafusion/execution/src/cache/cache_unit.rs#L103">list files cache</a> optimizes directory scanning operations in DataFusion. When a <a href="https://github.com/apache/datafusion/blob/5db274004bc4a7d493aba6764a8521694a67cd11/datafusion/core/src/datasource/listing/table.rs#L683">ListingTable</a> needs to access files in a directory, it first checks this cache before performing expensive <a href="https://github.com/apache/datafusion/blob/5db274004bc4a7d493aba6764a8521694a67cd11/datafusion/core/src/datasource/listing/url.rs#L207">filesystem listing operations</a>.</p>
<p>This cache is implemented as a simple but effective <code>HashMap</code> that stores directory paths as keys and lists of file metadata as values. The metadata includes important file information like size, last modified time, and other attributes that would otherwise require filesystem/network calls to retrieve:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> ListFilesCache <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-2">    cached<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> HashMap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Path</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vec</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>ObjectMeta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;,</span></span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="file-statistics-cache" class="level4">
<h4 class="anchored" data-anchor-id="file-statistics-cache">2. File statistics cache</h4>
<p>The <a href="https://github.com/apache/datafusion/blob/5db274004bc4a7d493aba6764a8521694a67cd11/datafusion/execution/src/cache/cache_unit.rs#L31">file statistics cache</a> stores important statistics about each file, such as row count and column statistics (min/max values). These statistics are used by DataFusion’s query optimizer to make better execution decisions, like pruning files that cannot contain matching data.</p>
<p>The cache avoids having to <a href="https://github.com/apache/datafusion/blob/5db274004bc4a7d493aba6764a8521694a67cd11/datafusion/core/src/datasource/listing/table.rs#L1091">recompute/re-decode these statistics</a> for each query by storing them in a <code>HashMap</code> that maps file paths to both file metadata and statistics:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> FileStatisticsCache <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-2">    cached<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> HashMap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Path</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> (ObjectMeta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> Statistics)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;,</span></span>
<span id="cb2-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="parquet-metadata-cache" class="level4">
<h4 class="anchored" data-anchor-id="parquet-metadata-cache">3. Parquet metadata cache</h4>
<p>Getting Parquet metadata can be costly for two main reasons:</p>
<ol type="1">
<li>Network overhead: It requires up to 2 separate network requests to retrieve the raw metadata bytes - one for the footer offset and another for the actual metadata</li>
<li>Processing overhead: Decoding the metadata can be computationally expensive, especially for <a href="https://www.influxdata.com/blog/how-good-parquet-wide-tables/">tables with many columns</a></li>
</ol>
<p>To address these challenges, DataFusion provides the <a href="https://github.com/apache/datafusion/blob/5db274004bc4a7d493aba6764a8521694a67cd11/datafusion/core/src/datasource/physical_plan/parquet/reader.rs#L39">ParquetFileReaderFactory</a> trait. This trait allows developers to implement custom metadata handling strategies. The factory returns an <code>AsyncFileReader</code> that separates metadata access from data page access, enabling different caching and optimization approaches for each:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pub</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">trait</span> AsyncFileReader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Send</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> get_metadata(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">mut</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> BoxFuture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'_</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Result</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Arc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>ParquetMetaData<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;;</span></span>
<span id="cb3-3"></span>
<span id="cb3-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> get_bytes(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">mut</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">self</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> range<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Range<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">usize</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> BoxFuture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'_</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Result</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Bytes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;;</span></span>
<span id="cb3-5"></span>
<span id="cb3-6">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// other methods</span></span>
<span id="cb3-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="parquet-file-range-cache" class="level4">
<h4 class="anchored" data-anchor-id="parquet-file-range-cache">4. Parquet file range cache</h4>
<p>Lastly and most importantly, DataFusion caches the Parquet file ranges that have been read.</p>
<p>Under the hood, DataFusion uses <a href="https://docs.rs/object_store/latest/object_store/">object_store</a> to interact with the S3, GCS, or local filesystem. While object_store provides a unified interface for different storage backends, but it does not implement caching by default.</p>
<p>However, DataFusion’s flexible architecture allows developers to implement custom caching strategies by implementing the <code>AsyncFileReader</code> trait. This enables optimizations like:</p>
<ul>
<li>Caching frequently accessed data ranges in memory</li>
<li>Implementing tiered caching (e.g., memory + local disk)</li>
<li>Adding compression to reduce memory usage</li>
<li>Implementing cache eviction policies based on access patterns</li>
</ul>
<p>Notably, the <code>AsyncFileReader</code> trait has a <code>get_bytes_ranges</code> method:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pub</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">trait</span> AsyncFileReader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Send</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-2">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// previously mentioned methods </span></span>
<span id="cb4-3"></span>
<span id="cb4-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> get_byte_ranges(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">mut</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">self</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ranges<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vec</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Range<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">usize</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> BoxFuture<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'_</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Result</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vec</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>Bytes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;;</span></span>
<span id="cb4-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>The default implementation of <code>get_byte_ranges</code> simply calls <code>get_bytes</code> sequentially for each range, which can be inefficient when reading many small ranges. This is because each range requires a separate network request, leading to higher latency and costs.</p>
<p>However, developers can implement their own <a href="https://xiangpeng-hao.notion.site/Cool-Projects-with-Modern-Data-Analytics-11ed7d7dd30380a888eed5614fb79aa0#11ed7d7dd3038017b7b1e0c589aa6765">IO coalescing logic</a> to optimize performance. For example, they could:</p>
<ul>
<li>Merge adjacent or overlapping ranges to reduce the number of requests</li>
<li>Batch multiple small ranges into a single larger request</li>
<li>Implement prefetching for ranges likely to be needed soon</li>
</ul>
<p>These optimizations can significantly improve read performance and reduce storage costs, especially when working with remote storage like S3 or GCS.</p>
<p>So far we have discussed the core caching mechanisms built into DataFusion. These caches work together to optimize different aspects of query execution, from file discovery to data access.</p>
<p>The following sections will explore more advanced topics and future directions for DataFusion’s caching capabilities.</p>
</section>
</section>
<section id="caching-arrow" class="level2">
<h2 class="anchored" data-anchor-id="caching-arrow">Caching Arrow</h2>
<p>Arrow is the in-memory columnar format that DataFusion uses to process data efficiently. Before DataFusion can execute any query logic, Parquet data must be <a href="../../posts/parquet-to-arrow/">decoded into Arrow format</a>. This decoding process involves decompressing the data, converting between data types, and validating constraints - operations that recent research<sup>1</sup> has shown can be a performance bottleneck for many analytical workloads.</p>
<p>One promising optimization approach is to cache the decoded Arrow data rather than the raw Parquet bytes. This allows us to skip the expensive decoding step on subsequent queries, potentially improving query latency significantly.</p>
<p>The figure below compares query latencies between two caching strategies using the <a href="https://github.com/apache/datafusion/blob/main/benchmarks/queries/clickbench/queries.sql">ClickBench</a> benchmark suite. The x-axis shows the query ID (0-42) and the y-axis shows query latency in milliseconds (lower is better). For each query, we measure the latency when caching the raw Parquet bytes versus caching the decoded Arrow arrays.</p>
<p><img src="https://blog.haoxp.xyz/posts/caching-datafusion/cache-arrow.png" class="img-fluid"></p>
<section id="takeaways" class="level4">
<h4 class="anchored" data-anchor-id="takeaways">Takeaways</h4>
<ul>
<li>Caching Arrow consistently outperforms or matches caching Parquet across all queries, demonstrating its effectiveness as an optimization strategy.</li>
<li>The performance gains vary significantly based on query characteristics:
<ul>
<li>Scan-intensive queries (Q20-Q23) show the largest improvements, with up to 3x speedup, since they benefit directly from avoiding Parquet decoding</li>
<li>Aggregation-heavy queries (Q8-Q18) see more modest gains, as their execution time is dominated by computation rather than data access</li>
</ul></li>
<li>Memory usage can be a concern - Q23 triggered an out-of-memory error when caching Arrow data, highlighting its excessive memory usage.</li>
</ul>
</section>
<section id="but-at-what-cost" class="level3">
<h3 class="anchored" data-anchor-id="but-at-what-cost">But at what cost?</h3>
<p>While caching Arrow data can significantly improve query performance, it comes with substantial memory overhead, as demonstrated by Q23’s out-of-memory error. The figure below compares memory usage between caching Parquet versus Arrow data across the benchmark queries. Since each query was run independently, the measurements reflect the memory requirements for executing a single query in isolation.</p>
<p><img src="https://blog.haoxp.xyz/posts/caching-datafusion/cache-arrow-memory.png" class="img-fluid"></p>
<section id="takeaways-1" class="level4">
<h4 class="anchored" data-anchor-id="takeaways-1">Takeaways</h4>
<ul>
<li>Parquet achieves roughly 4x-5x compression ratio compared to Arrow’s in-memory format</li>
<li>The benefit of caching Arrow data varies, but its cost is consistently 4x-5x higher memory usage.</li>
</ul>
</section>
</section>
<section id="zoom-in-a-bit" class="level3">
<h3 class="anchored" data-anchor-id="zoom-in-a-bit">Zoom-in a bit</h3>
<p>Now we take a closer look at Q21 – one of the queries that benefit a lot from caching Arrow:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"SearchPhrase"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">MIN</span>(<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"URL"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNT</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> c </span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> hits </span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"URL"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">LIKE</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%google%'</span> </span>
<span id="cb5-4">      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AND</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"SearchPhrase"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span> </span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"SearchPhrase"</span> </span>
<span id="cb5-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> c </span>
<span id="cb5-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">DESC</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">LIMIT</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>;</span></code></pre></div>
<p>The query scans two string columns (“URL” and “SearchPhrase”) and applies a filter on them.</p>
<p>Let’s now compare their query time and memory usage – we got roughly 3x speedup by using 4x more memory, not bad! <img src="https://blog.haoxp.xyz/posts/caching-datafusion/cache-arrow-q21.png" class="img-fluid"></p>
</section>
<section id="how-to-cache-arrow" class="level3">
<h3 class="anchored" data-anchor-id="how-to-cache-arrow">How to cache Arrow?</h3>
<p>The figure below builds on the architecture from our <a href="../../posts/parquet-to-arrow/">previous post</a>, adding the new Arrow cache component. The Arrow cache is positioned between the <a href="https://github.com/apache/datafusion/blob/5db274004bc4a7d493aba6764a8521694a67cd11/datafusion/core/src/datasource/physical_plan/parquet/access_plan.rs#L86">ParquetAccessPlan</a> and the decoded Arrow RecordBatch. When a query requests data:</p>
<ol type="1">
<li>First, we check if the requested RecordBatch exists in the cache</li>
<li>If found, we can skip both fetching and decoding the Parquet data by pruning the AccessPlan</li>
<li>If not found, we fetch and decode the Parquet data as normal, then insert the resulting Arrow RecordBatch into the cache for future use</li>
</ol>
<p><img src="https://blog.haoxp.xyz/posts/caching-datafusion/cache-arrow-arch.jpg" class="img-fluid"></p>
<p>Although the architecture is simple, implementing it faces several challenges:</p>
<ol type="1">
<li>How to map Parquet byte ranges to the corresponding Arrow RecordBatches</li>
<li>Granularity/shape of caching – column-level vs batch-level caching.</li>
<li>How to efficiently test if the cached ranges contains the requested range? E.g., request range (1024, 2048), but cached ranges has [(0, 2049), (4096, 3072)].</li>
<li>Memory management – implementing efficient spill-to-disk strategies</li>
</ol>
<p>We are actively working on solutions to these challenges as part of our research into high-performance Arrow caching systems. Our goal is to develop practical implementations that can be integrated into production environments. We plan to publish our findings and release the code as open source in the near future. Consider <a href="https://haoxp.xyz/fund/">funding my research</a> to support this work.</p>
</section>
</section>
<section id="standalone-caching-service" class="level2">
<h2 class="anchored" data-anchor-id="standalone-caching-service">Standalone caching service</h2>
<p>So far we have discussed caching within individual DataFusion instances, as shown in the Figure below (upper). While this approach works well for single-instance deployments, it is wasteful when multiple DataFusion instances access the same data.</p>
<p>A more scalable approach is to implement a standalone shared caching service (lower) that can be accessed by multiple DataFusion instances, with the following advantages:</p>
<ol type="1">
<li>Reduced resource usage - By eliminating redundant caching and decoding across instances, it optimizes both memory and CPU utilization</li>
<li>Improved manageability - Decoupling the caching logic from compute nodes simplifies scaling and operational management</li>
<li>Consistent performance - No latency spike after compute node restarts. With stateless compute nodes and a persistent centralized cache, the system avoids cache warmup delays after node restarts</li>
</ol>
<p><img src="https://blog.haoxp.xyz/posts/caching-datafusion/shared-cache.jpg" class="img-fluid"></p>
<section id="caching-interface" class="level3">
<h3 class="anchored" data-anchor-id="caching-interface">Caching interface</h3>
<p>The simplest caching interface treats the caching service as a transparent proxy for object storage. The service implements DataFusion’s <code>AsyncFileReader</code> trait to intercept Parquet file reads, caching byte ranges as they are accessed.</p>
<p>The bytes are transferred between DataFusion and the cache service using HTTP and can be implemented in any programming languages. This simple interface requires minimal changes to DataFusion.</p>
<p>A more sophisticated approach is to implement caching through the Arrow Flight protocol, with the caching service running as a full DataFusion instance capable of executing query plans. Rather than just serving cached bytes, this design allows the caching service to process queries directly.</p>
<p>When a querier needs data, it sends the complete <code>ParquetExec</code> physical plan to the caching service. The service can then:</p>
<ol type="1">
<li>Execute the plan against its cached data</li>
<li>Apply filters and projections directly on the cached data (filter pushdown)</li>
<li>Return only the necessary Arrow RecordBatches to the querier</li>
</ol>
<p>This architecture provides several advantages: - Reduced network transfer by filtering data at the cache layer - Lower client-side CPU usage since filtering happens at the cache</p>
<p>The tradeoff is increased complexity in both the client and cache service implementations compared to the simple byte-range caching approach.</p>
</section>
<section id="caching-medium" class="level3">
<h3 class="anchored" data-anchor-id="caching-medium">Caching medium</h3>
<p>The standalone caching service allows a diverse set of storage mediums to optimize the performance and cost.</p>
<p>The most obvious choice is to cache data in memory, which is fast but expensive. We can do better by spilling the data to SSD when memory is full, and to HDD when SSD is full.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this post, we discussed DataFusion’s caching mechanisms and explored the potential of caching Arrow data in standalone caching services. We believe that caching is a key component for every cloud-native analytics systems, and my research project is actively building systems that bridges the gap between what academia known as the state-of-the-art and what industry can actually use.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>BtrBlocks: Efficient Columnar Compression for Data Lakes (<a href="https://www.cs.cit.tum.de/fileadmin/w00cfj/dis/papers/btrblocks.pdf">SIGMOD 2023 Paper</a>)↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://blog.haoxp.xyz/posts/caching-datafusion/</guid>
  <pubDate>Sun, 27 Oct 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Parquet pruning in DataFusion</title>
  <dc:creator>Xiangpeng Hao</dc:creator>
  <link>https://blog.haoxp.xyz/posts/parquet-to-arrow/</link>
  <description><![CDATA[ 





<p>Note: my research is <a href="https://haoxp.xyz/fund/">funded</a> by <a href="https://www.influxdata.com">InfluxData</a>, which made this blog post possible.</p>
<hr>
<p>Parquet has become the industry standard for storing columnar data, and reading Parquet efficiently is crucial for query performance.</p>
<p>To optimize this, DataFusion implements advanced Parquet support for effective data pruning and decoding.</p>
<p>However, achieving high performance adds complexity, and this is no exception. This post provides an overview of the techniques used in DataFusion to read Parquet files selectively.</p>
<section id="the-pipeline" class="level3">
<h3 class="anchored" data-anchor-id="the-pipeline">The pipeline</h3>
<p><img src="https://blog.haoxp.xyz/posts/parquet-to-arrow/read-parquet.jpg" class="img-fluid"></p>
<section id="parquet-file-structure" class="level4">
<h4 class="anchored" data-anchor-id="parquet-file-structure">0. Parquet file structure</h4>
<p>Parquet structures data into row groups, each row group contains a set of columns, each columns contains a set of pages. Read <a href="https://www.influxdata.com/blog/querying-parquet-millisecond-latency/">Querying Parquet with Millisecond Latency</a> for more details.</p>
</section>
<section id="read-metadata" class="level4">
<h4 class="anchored" data-anchor-id="read-metadata">1. Read metadata</h4>
<p>DataFusion use Parquet metadata to understand what is in the file. <a href="https://github.com/apache/datafusion/blob/31701b8dc9c6486856c06a29a32107d9f4549cec/datafusion/core/src/datasource/physical_plan/parquet/reader.rs#L118">Reading metadata</a> in the worst case requires two network requests: one to read the footer size, and another one to read the footer itself. <a href="https://www.influxdata.com/blog/how-good-parquet-wide-tables/">Decoding metadata</a> is generally fast, but can be slow for very wide tables.</p>
<p>DataFusion allows users to cache metadata through the <a href="https://github.com/apache/datafusion/blob/31701b8dc9c6486856c06a29a32107d9f4549cec/datafusion/core/src/datasource/physical_plan/parquet/reader.rs#L39">ParquetFileReaderFactory</a> trait.</p>
</section>
<section id="prune-by-projection" class="level4">
<h4 class="anchored" data-anchor-id="prune-by-projection">2. Prune by projection</h4>
<p>Queries usually won’t select all columns, e.g., <code>SELECT a from table</code> only reads column <code>a</code>.</p>
<p>As a <strong>columnar</strong> format, Parquet allows DataFusion to <a href="(https://github.com/apache/datafusion/blob/31701b8dc9c6486856c06a29a32107d9f4549cec/datafusion/core/src/datasource/physical_plan/parquet/mod.rs#L778)">only read</a> the <strong>columns</strong> that are needed.</p>
</section>
<section id="prune-by-row-group-stats-and-bloom-filters" class="level4">
<h4 class="anchored" data-anchor-id="prune-by-row-group-stats-and-bloom-filters">3. Prune by row group stats and Bloom filters</h4>
<p>Each row group has <a href="https://github.com/apache/datafusion/blob/31701b8dc9c6486856c06a29a32107d9f4549cec/datafusion/core/src/physical_optimizer/pruning.rs#L81">basic stats</a> like min/max values for each column. DataFusion applies the query predicates to these stats to prune row groups, e.g., <code>SELECT * FROM table WHERE a &gt; 10</code> will only read row groups where <code>a</code> has a max value greater than 10.</p>
<p>Sometimes min/max stats are too simple to prune effectively, so Parquet also supports <a href="https://www.influxdata.com/blog/using-parquets-bloom-filters/">Bloom filters</a>. DataFusion <a href="https://github.com/apache/datafusion/blob/31701b8dc9c6486856c06a29a32107d9f4549cec/datafusion/core/src/datasource/physical_plan/parquet/opener.rs#L202">uses Bloom filter when available</a>.</p>
</section>
<section id="prune-by-page-stats" class="level4">
<h4 class="anchored" data-anchor-id="prune-by-page-stats">4. Prune by page stats</h4>
<p>Parquet optionally supports <a href="https://github.com/apache/parquet-format/blob/master/PageIndex.md">page-level stats</a> – similar to row group stats but more fine-grained. DataFusion implements the <a href="https://github.com/apache/datafusion/blob/31701b8dc9c6486856c06a29a32107d9f4549cec/datafusion/core/src/datasource/physical_plan/parquet/opener.rs#L219">Page pruning</a> when the stats is present.</p>
</section>
<section id="read-from-storage" class="level4">
<h4 class="anchored" data-anchor-id="read-from-storage">5. Read from storage</h4>
<p>Now we (hopefully) have pruned the Parquet file into a small ranges of bytes. The last step is to <a href="https://github.com/apache/datafusion/blob/31701b8dc9c6486856c06a29a32107d9f4549cec/datafusion/core/src/datasource/physical_plan/parquet/reader.rs#L103">make requests</a> to fetch those bytes and decode them into Arrow RecordBatch.</p>
</section>
</section>
<section id="bonus-filter-pushdown" class="level3">
<h3 class="anchored" data-anchor-id="bonus-filter-pushdown">Bonus: filter pushdown</h3>
<p>Filter pushdown, also known as late materialization or predicate pushdown, is a technique used to dynamically prune data based on what has already been evaluated. Unlike the static pruning methods applied when files are opened, filter pushdown operates during scanning, with filters being generated and applied in the scanner.</p>
<p><img src="https://blog.haoxp.xyz/posts/parquet-to-arrow/filter-pushdown.jpg" class="img-fluid"> DataFusion <a href="https://github.com/apache/datafusion/blob/31701b8dc9c6486856c06a29a32107d9f4549cec/datafusion/core/src/datasource/physical_plan/parquet/row_filter.rs#L154">implements filter pushdown</a> but has <a href="https://github.com/apache/datafusion/blob/31701b8dc9c6486856c06a29a32107d9f4549cec/datafusion/common/src/config.rs#L382">not enabled by default</a> due to <a href="https://github.com/apache/datafusion/issues/3463">some performance regressions</a>.</p>
<p>The community (including me) is working on to remove the <a href="https://github.com/apache/arrow-rs/issues/5523#issuecomment-2429470872">remaining performance issues</a> and enable it by default.</p>


</section>

 ]]></description>
  <guid>https://blog.haoxp.xyz/posts/parquet-to-arrow/</guid>
  <pubDate>Thu, 24 Oct 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Use StringView to make DataFusion faster</title>
  <dc:creator>Xiangpeng Hao, Andrew Lamb</dc:creator>
  <link>https://blog.haoxp.xyz/posts/string-view-datafusion/</link>
  <description><![CDATA[ 





<p>Editor note: This blog post is adapted from the InfluxData blog post series, make sure to also check out the original posts <a href="https://www.influxdata.com/blog/faster-queries-with-stringview-part-one-influxdb/">1</a> <a href="https://www.influxdata.com/blog/faster-queries-with-stringview-part-two-influxdb/">2</a>.</p>
<p>Note: Thanks to InfluxData for sponsoring this work as a summer intern project</p>
<hr>
<p>This blog describes our experience implementing <a href="https://arrow.apache.org/docs/format/Columnar.html#variable-size-binary-view-layout">StringView</a> in the <a href="https://github.com/apache/arrow-rs">Rust implementation</a> of <a href="https://arrow.apache.org/">Apache Arrow</a>, and integrating it into <a href="https://datafusion.apache.org/">Apache DataFusion</a>, significantly accelerating string-intensive queries in the <a href="https://benchmark.clickhouse.com/">ClickBench</a> benchmark by 20%- 200% (Figure 1<sup>1</sup>).</p>
<p>Getting significant end-to-end performance improvements was non-trivial. Implementing StringView itself was only a fraction of the effort required. Among other things, we had to optimize UTF-8 validation, implement unintuitive compiler optimizations, tune block sizes, and time GC to realize the <a href="https://www.influxdata.com/blog/flight-datafusion-arrow-parquet-fdap-architecture-influxdb/">FDAP ecosystem</a>’s benefit. With other members of the open source community, we were able to overcome performance bottlenecks that could have killed the project. We would like to contribute by explaining the challenges and solutions in more detail so that more of the community can learn from our experience.&nbsp;</p>
<p>StringView is based on a simple idea: avoid some string copies and accelerate comparisons with inlined prefixes. Like most great ideas, it is “obvious” only after <a href="https://db.in.tum.de/~freitag/papers/p29-neumann-cidr20.pdf">someone describes it clearly</a>. Although simple, straightforward implementation actually <em>slows down performance for almost every query</em>. We must, therefore, apply astute observations and diligent engineering to realize the actual benefits from StringView.&nbsp;</p>
<p>Although this journey was successful, not all research ideas are as lucky. To accelerate the adoption of research into industry, it is valuable to integrate research prototypes with practical systems. Understanding the nuances of real-world systems makes it more likely that research designs will lead to practical system improvements.</p>
<p>StringView support was released as part of arrow-rs <a href="https://crates.io/crates/arrow/52.2.0">v52.2.0</a> and DataFusion v41.0.0. You can try it by setting the <code>schema_force_string_view</code> <a href="https://datafusion.apache.org/user-guide/configs.html">DataFusion configuration option</a>, and we are <a href="https://github.com/apache/datafusion/issues/11682">hard at work with the community to</a> make it the default. We invite everyone to try it out, take advantage of the effort invested so far, and contribute to making it better.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.haoxp.xyz/posts/string-view-datafusion/click-perf.png" class="img-fluid figure-img"></p>
<figcaption>Figure 1: StringView improves string-intensive ClickBench query performance by 20% - 200%</figcaption>
</figure>
</div>
<section id="section-1-what-is-stringview" class="level2">
<h2 class="anchored" data-anchor-id="section-1-what-is-stringview">Section 1: What is StringView?</h2>
<p>The concept of inlined strings with prefixes (called “German Strings” <a href="https://x.com/andy_pavlo/status/1813258735965643203">by Andy Pavlo</a>, in homage to <a href="https://www.tum.de/">TUM</a>, where the <a href="https://db.in.tum.de/~freitag/papers/p29-neumann-cidr20.pdf">Umbra paper that describes</a> them originated) has been used in many recent database systems (<a href="https://engineering.fb.com/2024/02/20/developer-tools/velox-apache-arrow-15-composable-data-management/">Velox</a>, <a href="https://pola.rs/posts/polars-string-type/">Polars</a>, <a href="https://duckdb.org/2021/12/03/duck-arrow.html">DuckDB</a>, <a href="https://cedardb.com/blog/german_strings/">CedarDB</a>, etc.) and was introduced to Arrow as a new <a href="https://arrow.apache.org/docs/format/Columnar.html#variable-size-binary-view-layout">StringViewArray</a><sup>2</sup> type. Arrow’s original <a href="https://arrow.apache.org/docs/format/Columnar.html#variable-size-binary-layout">StringArray</a> is very memory efficient but less effective for certain operations. StringViewArray accelerates string-intensive operations via prefix inlining and a more flexible and compact string representation.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.haoxp.xyz/posts/string-view-datafusion/string-view.png" class="img-fluid figure-img"></p>
<figcaption>Figure 2: Use StringArray and StringViewArray to represent the same string content.</figcaption>
</figure>
</div>
<p>A StringViewArray consists of three components:</p>
<ol type="1">
<li>The <em><code>view</code></em> array<br>
</li>
<li>The buffers<br>
</li>
<li>The buffer pointers (IDs) that map buffer offsets to their physical locations</li>
</ol>
<p>Each <code>view</code> is 16 bytes long, and its contents differ based on the string’s length:</p>
<ul>
<li>string length &lt; 12 bytes: the first four bytes store the string length, and the remaining 12 bytes store the inlined string.<br>
</li>
<li>string length &gt; 12 bytes: the string is stored in a separate buffer. The length is again stored in the first 4 bytes, followed by the buffer id (4 bytes), the buffer offset (4 bytes), and the prefix (first 4 bytes) of the string.</li>
</ul>
<p>Figure 2 shows an example of the same logical content (left) using StringArray (middle) and StringViewArray (right):</p>
<ul>
<li>The first string – <code>“Apache DataFusion”</code> – is 17 bytes long, and both StringArray and StringViewArray store the string’s bytes at the beginning of the buffer. The StringViewArray also inlines the first 4 bytes – <code>“Apac”</code> – in the view.<br>
</li>
<li>The second string, <code>“InfluxDB”</code> is only 8 bytes long, so StringViewArray completely inlines the string content in the <code>view</code> struct while StringArray stores the string in the buffer as well.<br>
</li>
<li>The third string <code>“Arrow Rust Impl”</code> is 15 bytes long and cannot be fully inlined. StringViewArray stores this in the same form as the first string.<br>
</li>
<li>The last string <code>“Apache DataFusion”</code> has the same content as the first string. It’s possible to use StringViewArray to avoid this duplication and reuse the bytes by pointing the view to the previous location.</li>
</ul>
<p>StringViewArray provides three opportunities for outperforming StringArray:</p>
<ol type="1">
<li>Less copying via the offset + buffer format<br>
</li>
<li>Faster comparisons using the inlined string prefix<br>
</li>
<li>Reusing repeated string values with the flexible <code>view</code> layout</li>
</ol>
<p>The rest of this blog post discusses how to apply these opportunities in real query scenarios to improve performance, what challenges we encountered along the way, and how we solved them.</p>
</section>
<section id="section-2-faster-parquet-loading" class="level2">
<h2 class="anchored" data-anchor-id="section-2-faster-parquet-loading">Section 2: Faster Parquet Loading</h2>
<p><a href="https://parquet.apache.org/">Apache Parquet</a> is the de facto format for storing large-scale analytical data commonly stored LakeHouse-style, such as <a href="https://iceberg.apache.org">Apache Iceberg</a> and <a href="https://delta.io">Delta Lake</a>. Efficiently loading data from Parquet is thus critical to query performance in many important real-world workloads.</p>
<p>Parquet encodes strings (i.e., <a href="https://docs.rs/parquet/latest/parquet/data_type/struct.ByteArray.html">byte array</a>) in a slightly different format than required for the original Arrow StringArray. The string length is encoded inline with the actual string data (as shown in Figure 4 left). As mentioned previously, StringArray requires the data buffer to be continuous and compact—the strings have to follow one after another. This requirement means that reading Parquet string data into an Arrow StringArray requires copying and consolidating the string bytes to a new buffer and tracking offsets in a separate array. Copying these strings is often wasteful. Typical queries filter out most data immediately after loading, so most of the copied data is quickly discarded.</p>
<p>On the other hand, reading Parquet data as a StringViewArray can re-use the same data buffer as storing the Parquet pages because StringViewArray does not require strings to be contiguous. For example, in Figure 4, the StringViewArray directly references the buffer with the decoded Parquet page. The string <code>“Arrow Rust Impl”</code> is represented by a <code>view</code> with offset 37 and length 15 into that buffer.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.haoxp.xyz/posts/string-view-datafusion/parquet.png" class="img-fluid figure-img" style="width:70.0%"></p>
<figcaption>Figure 4: StringViewArray avoids copying by reusing decoded Parquet pages.</figcaption>
</figure>
</div>
<p><strong>Mini benchmark</strong><br>
Reusing Parquet buffers is great in theory, but how much does saving a copy actually matter? We can run the following benchmark in arrow-rs to find out:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cargo</span> bench <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--bench</span> arrow_reader <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--features</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arrow test_common experimental"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arrow_array_reader/Binary.*Array/plain encoded"</span></span></code></pre></div>
<p>Our benchmarking machine shows that loading <em>BinaryViewArray</em> is almost 2x faster than loading BinaryArray (see next section about why this isn’t <em>String</em>ViewArray).</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb2-1">arrow_array_reader/BinaryArray/plain encoded                        time:   [315.86 µs 317.47 µs 319.00 µs]</span>
<span id="cb2-2"></span>
<span id="cb2-3">arrow_array_reader/BinaryViewArray/plain encoded</span>
<span id="cb2-4">time:   [162.08 µs 162.20 µs 162.32 µs]</span></code></pre></div>
<p>You can read more on this arrow-rs issue: <a href="https://github.com/apache/arrow-rs/issues/5904">https://github.com/apache/arrow-rs/issues/5904</a></p>
<section id="section-2.1-from-binary-to-strings" class="level3">
<h3 class="anchored" data-anchor-id="section-2.1-from-binary-to-strings">Section 2.1: From Binary to Strings</h3>
<p>You may wonder why we reported performance for BinaryViewArray when this post is about StringViewArray. Surprisingly, initially, our implementation to read StringViewArray from Parquet was much <em>slower</em> than StringArray. Why? TLDR: Although reading StringViewArray copied less data, the initial implementation also spent much more time validating <a href="https://en.wikipedia.org/wiki/UTF-8#:~:text=UTF%2D8%20is%20a%20variable,Unicode%20Standard">UTF-8</a> (as shown in Figure 5).</p>
<p>Strings are stored as byte sequences. When reading data from (potentially untrusted) Parquet files, a Parquet decoder must ensure those byte sequences are valid UTF-8 strings, and most programming languages, including Rust, include highly <a href="https://doc.rust-lang.org/std/str/fn.from_utf8.html">optimized routines</a> for doing so.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.haoxp.xyz/posts/string-view-datafusion/utf8-perf.png" class="img-fluid figure-img" style="width:70.0%"></p>
<figcaption>Figure 5: Time to load strings from Parquet. The UTF-8 validation advantage initially eliminates the advantage of reduced copying for StringViewArray.</figcaption>
</figure>
</div>
<p>A StringArray can be validated in a single call to the UTF-8 validation function as it has a continuous string buffer. As long as the underlying buffer is UTF-8<sup>3</sup>, all strings in the array must be UTF-8. The Rust parquet reader makes a single function call to validate the entire buffer.</p>
<p>However, validating an arbitrary StringViewArray requires validating each string with a separate call to the validation function, as the underlying buffer may also contain non-string data (for example, the lengths in Parquet pages).</p>
<p>UTF-8 validation in Rust is highly optimized and favors longer strings (as shown in Figure 6), likely because it leverages SIMD instructions to perform parallel validation. The benefit of a single function call to validate UTF-8 over a function call for each string more than eliminates the advantage of avoiding the copy for StringViewArray.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.haoxp.xyz/posts/string-view-datafusion/simd-utf8.png" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption>Figure 6: UTF-8 validation throughput vs string length—StringArray’s contiguous buffer can be validated much faster than StringViewArray’s buffer.</figcaption>
</figure>
</div>
<p>Does this mean we should only use StringArray? No! Thankfully, there’s a clever way out. The key observation is that in many real-world datasets, <a href="https://www.vldb.org/pvldb/vol17/p148-zeng.pdf">99% of strings are shorter than 128 bytes</a>, meaning the encoded length values are smaller than 128, <strong>in which case the length itself is also valid UTF-8</strong> (in fact, it is <a href="https://en.wikipedia.org/wiki/ASCII">ASCII</a>).</p>
<p>This observation means we can optimize validating UTF-8 strings in Parquet pages by treating the length bytes as part of a single large string as long as the length <em>value</em> is less than 128. Put another way, prior to this optimization, the length bytes act as string boundaries, which require a UTF-8 validation on each string. After this optimization, only those strings with lengths larger than 128 bytes (less than 1% of the strings in the ClickBench dataset) are string boundaries, significantly increasing the UTF-8 validation chunk size and thus improving performance.</p>
<p>The <a href="https://github.com/apache/arrow-rs/pull/6009/files">actual implementation</a> is only nine lines of Rust (with 30 lines of comments). You can find more details in the related arrow-rs issue: <a href="https://github.com/apache/arrow-rs/issues/5995">https://github.com/apache/arrow-rs/issues/5995</a>. As expected, with this optimization, loading StringViewArray is almost 2x faster than loading StringArray.</p>
</section>
<section id="section-2.2-be-careful-about-implicit-copies" class="level3">
<h3 class="anchored" data-anchor-id="section-2.2-be-careful-about-implicit-copies">Section 2.2: Be Careful About Implicit Copies</h3>
<p>After all the work to avoid copying strings when loading from Parquet, performance was still not as good as expected. We tracked the problem to a few implicit data copies that we weren’t aware of, as described in <a href="https://github.com/apache/arrow-rs/issues/6033">this issue</a>.</p>
<p>The copies we eventually identified come from the following innocent-looking line of Rust code, where <code>self.buf</code> is a <a href="https://en.wikipedia.org/wiki/Reference_counting">reference counted</a> pointer that should transform without copying into a buffer for use in StringViewArray.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> block_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>append_block(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">self</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>buf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>clone()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>into())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>However, Rust-type coercion rules favored a blanket implementation that <em>did</em> copy data. This implementation is shown in the following code block where the <code>impl&lt;T: AsRef&lt;[u8]&gt;&gt;</code> will accept any type that implements <code>AsRef&lt;[u8]&gt;</code> and copies the data to create a new buffer. To avoid copying, users need to explicitly call <code>from_vec</code>, which consumes the <code>Vec</code> and transforms it into a buffer.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">impl</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">AsRef</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>[<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">u8</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">From</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> Buffer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> from(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> T) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Self</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// copies data here</span></span>
<span id="cb4-4">     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb4-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">impl</span> Buffer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> </span>
<span id="cb4-8">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pub</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> from_vec<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vec</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>T<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Self</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// zero-copy transformation</span></span>
<span id="cb4-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb4-11">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Diagnosing this implicit copy was time-consuming as it relied on subtle Rust language semantics. We needed to track every step of the data flow to ensure every copy was necessary. To help other users and prevent future mistakes, we also <a href="https://github.com/apache/arrow-rs/pull/6043">removed</a> the implicit API from arrow-rs in favor of an explicit API. Using this approach, we found and fixed several <a href="https://github.com/apache/arrow-rs/pull/6039">other unintentional copies</a> in the code base—hopefully, the change will help other <a href="https://github.com/spiraldb/vortex/pull/504">downstream users</a> avoid unnecessary copies.</p>
</section>
<section id="section-2.3-help-the-compiler-by-giving-it-more-information" class="level3">
<h3 class="anchored" data-anchor-id="section-2.3-help-the-compiler-by-giving-it-more-information">Section 2.3: Help the Compiler by Giving it More Information</h3>
<p>The Rust compiler’s automatic optimizations mostly work very well for a wide variety of use cases, but sometimes, it needs additional hints to generate the most efficient code. When profiling the performance of <code>view</code> construction, we found, counterintuitively, that constructing <strong>long</strong> strings was 10x faster than constructing <strong>short</strong> strings, which made short strings slower on StringViewArray than on StringArray!</p>
<p>As described in Section 1, StringViewArray treats long and short strings differently. Short strings (&lt;12 bytes) directly inline to the <code>view</code> struct, while long strings only inline the first 4 bytes. The code to construct a <code>view</code> looks something like this:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb5-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-2">   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Construct 16 byte view for short string</span></span>
<span id="cb5-3">   <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">mut</span> view_buffer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-4">   view_buffer[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>copy_from_slice(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>to_le_bytes())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-5">   view_buffer[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>len()]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>copy_from_slice(data)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-6">   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb5-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>      </span>
<span id="cb5-8">   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Construct 16 byte view for long string</span></span>
<span id="cb5-9">   ByteView <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-10">       length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-11">       prefix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">u32</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">::</span>from_le_bytes(data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>try_into()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unwrap())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-12">       buffer_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> block_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-13">       offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-14">   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>It appears that both branches of the code should be fast: they both involve copying at most 16 bytes of data and some memory shift/store operations. How could the branch for short strings be 10x slower?</p>
<p>Looking at the assembly code using <a href="https://godbolt.org/">godbolt</a>, we (with help from <a href="https://github.com/aoli-al">Ao Li</a>) found the compiler used CPU <strong>load instructions</strong> to copy the fixed-sized 4 bytes to the <code>view</code> for long strings, but it calls a function, <a href="https://doc.rust-lang.org/std/ptr/fn.copy_nonoverlapping.html"><code>ptr::copy_non_overlapping</code></a>, to copy the inlined bytes to the <code>view</code> for short strings. The difference is that long strings have a prefix size (4 bytes) known at compile time, so the compiler directly uses efficient CPU instructions. But, since the size of the short string is unknown to the compiler, it has to call the general-purpose function <code>ptr::copy_non_coverlapping</code>. Making a function call is significant unnecessary overhead compared to a CPU copy instruction.</p>
<p>However, we know something the compiler doesn’t know: the short string size is not arbitrary—it must be between 0 and 12 bytes, and we can leverage this information to avoid the function call. Our solution generates 13 copies of the function using generics, one for each of the possible prefix lengths. The code looks as follows, and <a href="https://godbolt.org/z/685YPsd5G">checking the assembly code</a>, we confirmed there are no calls to <code>ptr::copy_non_overlapping</code>, and only native CPU instructions are used. For more details, see <a href="https://github.com/apache/arrow-rs/issues/6034">the ticket</a>.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> make_inlined_view<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> LEN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">usize</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>[<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">u8</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">u128</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-2">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">mut</span> view_buffer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-3">     view_buffer[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>copy_from_slice(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>(LEN <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">as</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">u32</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>to_le_bytes())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-4">     view_buffer[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> LEN]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>copy_from_slice(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>data[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>LEN])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-5">     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">u128</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">::</span>from_le_bytes(view_buffer)</span>
<span id="cb6-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pub</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> make_view(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>[<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">u8</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> block_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">u32</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">u32</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">u128</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-8">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>len()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-9">     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// generate special code for each of the 13 possible lengths</span></span>
<span id="cb6-10">     <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">match</span> len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-11">         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">make_inlined_view::</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>(data)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-12">         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">make_inlined_view::</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>(data)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-13">         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">make_inlined_view::</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>(data)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-14">         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">make_inlined_view::</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>(data)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-15">         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">make_inlined_view::</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>(data)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-16">         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">make_inlined_view::</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>(data)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-17">         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">make_inlined_view::</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>(data)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-18">         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">make_inlined_view::</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>(data)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-19">         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">make_inlined_view::</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>(data)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-20">         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">make_inlined_view::</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>(data)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-21">         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">make_inlined_view::</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>(data)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-22">         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">make_inlined_view::</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>(data)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-23">         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">make_inlined_view::</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>(data)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-24">         _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-25">           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// handle long string</span></span>
<span id="cb6-26"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}}</span></span></code></pre></div>
</section>
<section id="section-2.4-end-to-end-query-performance" class="level3">
<h3 class="anchored" data-anchor-id="section-2.4-end-to-end-query-performance">Section 2.4: End-to-End Query Performance</h3>
<p>In the previous sections, we went out of our way to make sure loading StringViewArray is faster than StringArray. Before going further, we wanted to verify if obsessing about reducing copies and function calls has actually improved end-to-end performance in real-life queries. To do this, we evaluated a ClickBench query (Q20) in DataFusion that counts how many URLs contain the word <code>"google"</code>:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNT</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> hits <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"URL"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">LIKE</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%google%'</span>;</span></code></pre></div>
<p>This is a relatively simple query; most of the time is spent on loading the “URL” column to find matching rows. The query plan looks like this:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb8-1">Projection: COUNT(*) [COUNT(*):Int64;N]</span>
<span id="cb8-2">  Aggregate: groupBy=[[]], aggr=[[COUNT(*)]] [COUNT(*):Int64;N]</span>
<span id="cb8-3">    Filter: hits.URL LIKE Utf8("%google%")</span>
<span id="cb8-4">      TableScan: hits </span></code></pre></div>
<p>We ran the benchmark in the DataFusion repo like this:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cargo</span> run <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--profile</span> release-nonlto <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--bin</span> dfbench <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--</span> clickbench <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--queries-path</span> benchmarks/queries/clickbench/queries.sql <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--iterations</span> 3 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--query</span> 20 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--path</span> benchmarks/data/hits.parquet <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--string-view</span></span></code></pre></div>
<p>With StringViewArray we saw a 24% end-to-end performance improvement, as shown in Figure 7. With the <code>--string-view</code> argument, the end-to-end query time is <code>944.3 ms, 869.6 ms, 861.9 ms</code> (three iterations). Without <code>--string-view</code>, the end-to-end query time is <code>1186.1 ms, 1126.1 ms, 1138.3 ms</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.haoxp.xyz/posts/string-view-datafusion/quer_time.png" class="img-fluid figure-img" style="width:70.0%"></p>
<figcaption>Figure 7: StringView reduces end-to-end query time by 24% on ClickBench Q20.</figcaption>
</figure>
</div>
<p>We also double-checked with detailed profiling and verified that the time reduction is indeed due to faster Parquet loading.</p>
</section>
</section>
<section id="section-3-faster-string-operations" class="level2">
<h2 class="anchored" data-anchor-id="section-3-faster-string-operations">Section 3: Faster String Operations</h2>
<p>We have discussed the nuances required to accelerate Parquet loading using StringViewArray by reusing buffers and reducing copies. In this second part of the post, we describe the rest of the journey: implementing additional efficient operations for real query processing.</p>
<section id="section-3.1-faster-comparison" class="level3">
<h3 class="anchored" data-anchor-id="section-3.1-faster-comparison">Section 3.1: Faster comparison</h3>
<p>String comparison is ubiquitous; it is the core of <a href="https://docs.rs/arrow/latest/arrow/compute/kernels/cmp/index.html"><code>cmp</code></a>, <a href="https://docs.rs/arrow/latest/arrow/compute/fn.min.html"><code>min</code></a><code>/max</code>, and <a href="https://docs.rs/arrow/latest/arrow/compute/kernels/comparison/fn.like.html"><code>like</code></a><code>/ilike</code> kernels. StringViewArray is designed to accelerate such comparisons using the inlined prefix—the key observation is that, in many cases, only the first few bytes of the string determine the string comparison results.</p>
<p>For example, to compare the strings <code>InfluxDB</code> with <code>Apache DataFusion</code>, we only need to look at the first byte to determine the string ordering or equality. In this case, since <code>A</code> is earlier in the alphabet than <code>I,</code> <code>Apache DataFusion</code> sorts first, and we know the strings are not equal. Despite only needing the first byte, comparing these strings when stored as a StringArray requires two memory accesses: 1) load the string offset and 2) use the offset to locate the string bytes. For low-level operations such as <code>cmp</code> that are invoked millions of times in the very hot paths of queries, avoiding this extra memory access can make a measurable difference in query performance.</p>
<p>For StringViewArray, typically, only one memory access is needed to load the view struct. Only if the result can not be determined from the prefix is the second memory access required. For the example above, there is no need for the second access. This technique is very effective in practice: the second access is never necessary for the more than <a href="https://www.vldb.org/pvldb/vol17/p148-zeng.pdf">60% of real-world strings which are shorter than 12 bytes</a>, as they are stored completely in the prefix.</p>
<p>However, functions that operate on strings must be specialized to take advantage of the inlined prefix. In addition to low-level comparison kernels, we implemented <a href="https://github.com/apache/arrow-rs/issues/5374">a wide range</a> of other StringViewArray operations that cover the functions and operations seen in ClickBench queries. Supporting StringViewArray in all string operations takes quite a bit of effort, and thankfully the Arrow and DataFusion communities are already hard at work doing so (see <a href="https://github.com/apache/datafusion/issues/11752">https://github.com/apache/datafusion/issues/11752</a> if you want to help out).</p>
</section>
<section id="section-3.2-faster-take-and-filter" class="level3">
<h3 class="anchored" data-anchor-id="section-3.2-faster-take-and-filter">Section 3.2: Faster <code>take</code> and <code>filter</code></h3>
<p>After a filter operation such as <code>WHERE url &lt;&gt; ‘’</code> to avoid processing empty urls, DataFusion will often <em>coalesce</em> results to form a new array with only the passing elements. This coalescing ensures the batches are sufficiently sized to benefit from <a href="https://www.vldb.org/pvldb/vol11/p2209-kersten.pdf">vectorized processing</a> in subsequent steps.</p>
<p>The coalescing operation is implemented using the <a href="https://docs.rs/arrow/latest/arrow/compute/fn.take.html">take</a> and <a href="https://arrow.apache.org/rust/arrow/compute/kernels/filter/fn.filter.html">filter</a> kernels in arrow-rs. For StringArray, these kernels require copying the string contents to a new buffer without “holes” in between. This copy can be expensive especially when the new array is large.</p>
<p>However, <code>take</code> and <code>filter</code> for StringViewArray can avoid the copy by reusing buffers from the old array. The kernels only need to create a new list of <code>view</code>s that point at the same strings within the old buffers. Figure 8 illustrates the difference between the output of both string representations. StringArray creates two new strings at offsets 0-17 and 17-32, while StringViewArray simply points to the original buffer at offsets 0 and 25.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.haoxp.xyz/posts/string-view-datafusion/take.jpg" class="img-fluid figure-img" style="width:70.0%"></p>
<figcaption>Figure 8: Zero-copy take/filter for StringViewArray</figcaption>
</figure>
</div>
</section>
<section id="section-3.3-when-to-gc" class="level3">
<h3 class="anchored" data-anchor-id="section-3.3-when-to-gc">Section 3.3: When to GC?</h3>
<p>Zero-copy <code>take/filter</code> is great for generating large arrays quickly, but it is suboptimal for highly selective filters, where most of the strings are filtered out. When the cardinality drops, StringViewArray buffers become sparse—only a small subset of the bytes in the buffer’s memory are referred to by any <code>view</code>. This leads to excessive memory usage, especially in a <a href="https://github.com/apache/datafusion/issues/11628">filter-then-coalesce scenario</a>. For example, a StringViewArray with 10M strings may only refer to 1M strings after some filter operations; however, due to zero-copy take/filter, the (reused) 10M buffers can not be released/reused.</p>
<p>To release unused memory, we implemented a <a href="https://docs.rs/arrow/latest/arrow/array/struct.GenericByteViewArray.html#method.gc">garbage collection (GC)</a> routine to consolidate the data into a new buffer to release the old sparse buffer(s). As the GC operation copies strings, similarly to StringArray, we must be careful about when to call it. If we call GC too early, we cause unnecessary copying, losing much of the benefit of StringViewArray. If we call GC too late, we hold large buffers for too long, increasing memory use and decreasing cache efficiency. The <a href="https://pola.rs/posts/polars-string-type/">Polars blog</a> on StringView also refers to the challenge presented by garbage collection timing.</p>
<p><code>arrow-rs</code> implements the GC process, but it is up to users to decide when to call it. We leverage the semantics of the query engine and observed that the <a href="https://docs.rs/datafusion/latest/datafusion/physical_plan/coalesce_batches/struct.CoalesceBatchesExec.html"><code>CoalseceBatchesExec</code></a> operator, which merge smaller batches to a larger batch, is often used after the record cardinality is expected to shrink, which aligns perfectly with the scenario of GC in StringViewArray. We, therefore, <a href="https://github.com/apache/datafusion/pull/11587">implemented the GC procedure</a> inside <code>CoalseceBatchesExec[^5],</code>with a heuristic that estimates when the buffers are too sparse.</p>
</section>
<section id="section" class="level3">
<h3 class="anchored" data-anchor-id="section"></h3>
</section>
<section id="section-3.4-the-art-of-function-inlining-not-too-much-not-too-little" class="level3">
<h3 class="anchored" data-anchor-id="section-3.4-the-art-of-function-inlining-not-too-much-not-too-little">Section 3.4: The art of function inlining: not too much, not too little</h3>
<p>Like string inlining, <em>function</em> inlining is the process of embedding a short function into the caller to avoid the overhead of function calls (caller/callee save). Usually, the Rust compiler does a good job of deciding when to inline. However, it is possible to override its default using the <a href="https://doc.rust-lang.org/reference/attributes/codegen.html#the-inline-attribute"><code>#[inline(always)]</code> directive</a>. In performance-critical code, inlined code allows us to organize large functions into smaller ones without paying the runtime cost of function invocation.</p>
<p>However, function inlining is <strong><em>not</em></strong> always better, as it leads to larger function bodies that are harder for LLVM to optimize (for example, suboptimal <a href="https://en.wikipedia.org/wiki/Register_allocation">register spilling</a>) and risk overflowing the CPU’s instruction cache. We observed several performance regressions where function inlining caused <em>slower</em> performance when implementing the StringViewArray comparison kernels. Careful inspection and tuning of the code was required to aid the compiler in generating efficient code. More details can be found in this PR: <a href="https://github.com/apache/arrow-rs/pull/5900">https://github.com/apache/arrow-rs/pull/5900</a>.</p>
</section>
<section id="section-3.5-buffer-size-tuning" class="level3">
<h3 class="anchored" data-anchor-id="section-3.5-buffer-size-tuning">Section 3.5: Buffer size tuning</h3>
<p>StringViewArray permits multiple buffers, which enables a flexible buffer layout and potentially reduces the need to copy data. However, a large number of buffers slows down the performance of other operations. For example, <a href="https://docs.rs/arrow/latest/arrow/array/trait.Array.html#tymethod.get_array_memory_size"><code>get_array_memory_size</code></a><code>()</code> needs to sum the memory size of each buffer, which takes a long time with thousands of small buffers. In certain cases, we found that multiple calls to <a href="https://docs.rs/arrow/latest/arrow/compute/fn.concat_batches.html"><code>concat_batches</code></a> lead to arrays with millions of buffers, which was prohibitively expensive.</p>
<p>For example, consider a StringViewArray with the previous default buffer size of 8 KB. With this configuration, holding 4GB of string data requires almost half a million buffers! Larger buffer sizes are needed for larger arrays, but we cannot arbitrarily increase the default buffer size, as small arrays would consume too much memory (most arrays require at least one buffer). Buffer sizing is especially problematic in query processing, as we often need to construct small batches of string arrays, and the sizes are unknown at planning time.</p>
<p>To balance the buffer size trade-off, we again leverage the query processing (DataFusion) semantics to decide when to use larger buffers. While coalescing batches, we combine multiple small string arrays and set a smaller buffer size to keep the total memory consumption low. In string aggregation, we aggregate over an entire Datafusion partition, which can generate a large number of strings, so we set a larger buffer size (2MB).</p>
<p>To assist situations where the semantics are unknown, we also <a href="https://github.com/apache/arrow-rs/pull/6136">implemented</a> a classic dynamic exponential buffer size growth strategy, which starts with a small buffer size (8KB) and doubles the size of each new buffer up to 2MB. We implemented this strategy in arrow-rs and enabled it by default so that other users of StringViewArray can also benefit from this optimization. See this issue for more details: <a href="https://github.com/apache/arrow-rs/issues/6094">https://github.com/apache/arrow-rs/issues/6094</a>.</p>
</section>
<section id="section-3.6-end-to-end-query-performance" class="level3">
<h3 class="anchored" data-anchor-id="section-3.6-end-to-end-query-performance">Section 3.6: End-to-end query performance</h3>
<p>We have made significant progress in optimizing StringViewArray filtering operations. Now, let’s test it in the real world to see how it works!</p>
<p>Let’s consider ClickBench query 22, which selects multiple string fields (<code>URL</code>, <code>Title</code>, and <code>SearchPhase</code>) and applies several filters.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> </span>
<span id="cb10-2">  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"SearchPhrase"</span>, </span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">MIN</span>(<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"URL"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">MIN</span>(<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"Title"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNT</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> c, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNT</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">DISTINCT</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"UserID"</span>) </span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> hits </span>
<span id="cb10-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span> </span>
<span id="cb10-6">  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"Title"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">LIKE</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Google%'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AND</span> </span>
<span id="cb10-7">  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"URL"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">NOT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">LIKE</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%.google.%'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AND</span> </span>
<span id="cb10-8">  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"SearchPhrase"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span> </span>
<span id="cb10-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"SearchPhrase"</span> </span>
<span id="cb10-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">DESC</span> </span>
<span id="cb10-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">LIMIT</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>;</span></code></pre></div>
<p>We ran the benchmark using the following command in the DataFusion repo. Again, the <code>--string-view</code> option means we use StringViewArray instead of StringArray.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cargo</span> run <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--profile</span> release-nonlto <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--bin</span> dfbench <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--</span> clickbench <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--queries-path</span> benchmarks/queries/clickbench/queries.sql <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--iterations</span> 3 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--query</span> 22 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--path</span> benchmarks/data/hits.parquet <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--string-view</span></span></code></pre></div>
<p>To eliminate the impact of the faster Parquet reading using StringViewArray (see the first part of this blog), Figure 9 plots only the time spent in <code>FilterExec</code>. Without StringViewArray, the filter takes 7.17s; with StringViewArray, the filter only takes 4.86s, a 32% reduction in time. Moreover, we see a 17% improvement in end-to-end query performance.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.haoxp.xyz/posts/string-view-datafusion/filter-time.png" class="img-fluid figure-img" style="width:70.0%"></p>
<figcaption>Figure 9: StringViewArray reduces the filter time by 32% on ClickBench query 22.</figcaption>
</figure>
</div>
</section>
</section>
<section id="section-4-faster-string-aggregation" class="level2">
<h2 class="anchored" data-anchor-id="section-4-faster-string-aggregation">Section 4: Faster String Aggregation</h2>
<p>So far, we have discussed how to exploit two StringViewArray features: reduced copy and faster filtering. This section focuses on reusing string bytes to repeat string values.</p>
<p>As described in part one of this blog, if two strings have identical values, StringViewArray can use two different <code>view</code>s pointing at the same buffer range, thus avoiding repeating the string bytes in the buffer. This makes StringViewArray similar to an Arrow <a href="https://docs.rs/arrow/latest/arrow/array/struct.DictionaryArray.html">DictionaryArray</a> that stores Strings—both array types work well for strings with only a few distinct values.</p>
<p>Deduplicating string values can significantly reduce memory consumption in StringViewArray. However, this process is expensive and involves hashing every string and maintaining a hash table, and so it cannot be done by default when creating a StringViewArray. We introduced an <a href="https://docs.rs/arrow/latest/arrow/array/builder/struct.GenericByteViewBuilder.html#method.with_deduplicate_strings">opt-in string deduplication mode</a> in arrow-rs for advanced users who know their data has a small number of distinct values, and where the benefits of reduced memory consumption outweigh the additional overhead of array construction.</p>
<p>Once again, we leverage DataFusion query semantics to identify StringViewArray with duplicate values, such as aggregation queries with multiple group keys. For example, some <a href="https://github.com/apache/datafusion/blob/main/benchmarks/queries/clickbench/queries.sql">ClickBench queries</a> group by two columns:</p>
<ul>
<li><code>UserID</code> (an integer with close to 1 M distinct values)<br>
</li>
<li><code>MobilePhoneModel</code> (a string with less than a hundred distinct values)</li>
</ul>
<p>In this case, the output row count is <code>count(distinct UserID) * count(distinct MobilePhoneModel)</code>, which is 100M. Each string value of <code>MobilePhoneModel</code> is repeated 1M times. With StringViewArray, we can save space by pointing the repeating values to the same underlying buffer.</p>
<p>Faster string aggregation with StringView is part of a larger project to <a href="https://github.com/apache/datafusion/issues/7000">improve DataFusion aggregation performance</a>. We have a <a href="https://github.com/apache/datafusion/pull/11794">proof of concept implementation</a> with StringView that can improve the multi-column string aggregation by 20%. We would love your help to get it production ready!</p>
</section>
<section id="section-5-stringview-pitfalls" class="level2">
<h2 class="anchored" data-anchor-id="section-5-stringview-pitfalls">Section 5: StringView Pitfalls</h2>
<p>Most existing blog posts (including this one) focus on the benefits of using StringViewArray over other string representations such as StringArray. As we have discussed, even though it requires a significant engineering investment to realize, StringViewArray is a major improvement over StringArray in many cases.</p>
<p>However, there are several cases where StringViewArray is slower than StringArray. For completeness, we have listed those instances here:</p>
<ol type="1">
<li><strong>Tiny strings (when strings are shorter than 8 bytes)</strong>: every element of the StringViewArray consumes at least 16 bytes of memory—the size of the <code>view</code> struct. For an array of tiny strings, StringViewArray consumes more memory than StringArray and thus can cause slower performance due to additional memory pressure on the CPU cache.<br>
</li>
<li><strong>Many repeated short strings</strong>: Similar to the first point, StringViewArray can be slower and require more memory than a DictionaryArray because 1) it can only reuse the bytes in the buffer when the strings are longer than 12 bytes and 2) 32-bit offsets are always used, even when a smaller size (8 bit or 16 bit) could represent all the distinct values.<br>
</li>
<li><strong>Filtering:</strong> As we mentioned above, StringViewArrays often consume more memory than the corresponding StringArray, and memory bloat quickly dominates the performance without GC. However, invoking GC also reduces the benefits of less copying so must be carefully tuned.</li>
</ol>
</section>
<section id="section-6-conclusion-and-takeaways" class="level2">
<h2 class="anchored" data-anchor-id="section-6-conclusion-and-takeaways">Section 6: Conclusion and Takeaways</h2>
<p>In these two blog posts, we discussed what it takes to implement StringViewArray in arrow-rs and then integrate it into DataFusion. Our evaluations on ClickBench queries show that StringView can improve the performance of string-intensive workloads by up to 2x.</p>
<p>Given that DataFusion already <a href="https://benchmark.clickhouse.com/#eyJzeXN0ZW0iOnsiQWxsb3lEQiI6ZmFsc2UsIkF0aGVuYSAocGFydGl0aW9uZWQpIjpmYWxzZSwiQXRoZW5hIChzaW5nbGUpIjpmYWxzZSwiQXVyb3JhIGZvciBNeVNRTCI6ZmFsc2UsIkF1cm9yYSBmb3IgUG9zdGdyZVNRTCI6ZmFsc2UsIkJ5Q29uaXR5IjpmYWxzZSwiQnl0ZUhvdXNlIjpmYWxzZSwiY2hEQiAoUGFycXVldCwgcGFydGl0aW9uZWQpIjpmYWxzZSwiY2hEQiI6ZmFsc2UsIkNpdHVzIjpmYWxzZSwiQ2xpY2tIb3VzZSBDbG91ZCAoYXdzKSI6ZmFsc2UsIkNsaWNrSG91c2UgQ2xvdWQgKGF3cykgUGFyYWxsZWwgUmVwbGljYXMgT04iOmZhbHNlLCJDbGlja0hvdXNlIENsb3VkIChBenVyZSkiOmZhbHNlLCJDbGlja0hvdXNlIENsb3VkIChBenVyZSkgUGFyYWxsZWwgUmVwbGljYSBPTiI6ZmFsc2UsIkNsaWNrSG91c2UgQ2xvdWQgKEF6dXJlKSBQYXJhbGxlbCBSZXBsaWNhcyBPTiI6ZmFsc2UsIkNsaWNrSG91c2UgQ2xvdWQgKGdjcCkiOmZhbHNlLCJDbGlja0hvdXNlIENsb3VkIChnY3ApIFBhcmFsbGVsIFJlcGxpY2FzIE9OIjpmYWxzZSwiQ2xpY2tIb3VzZSAoZGF0YSBsYWtlLCBwYXJ0aXRpb25lZCkiOmZhbHNlLCJDbGlja0hvdXNlIChkYXRhIGxha2UsIHNpbmdsZSkiOmZhbHNlLCJDbGlja0hvdXNlIChQYXJxdWV0LCBwYXJ0aXRpb25lZCkiOmZhbHNlLCJDbGlja0hvdXNlIChQYXJxdWV0LCBzaW5nbGUpIjpmYWxzZSwiQ2xpY2tIb3VzZSAod2ViKSI6ZmFsc2UsIkNsaWNrSG91c2UiOmZhbHNlLCJDbGlja0hvdXNlICh0dW5lZCkiOmZhbHNlLCJDbGlja0hvdXNlICh0dW5lZCwgbWVtb3J5KSI6ZmFsc2UsIkNsb3VkYmVycnkiOmZhbHNlLCJDcmF0ZURCIjpmYWxzZSwiQ3J1bmNoeSBCcmlkZ2UgZm9yIEFuYWx5dGljcyAoUGFycXVldCkiOmZhbHNlLCJEYXRhYmVuZCI6ZmFsc2UsIkRhdGFGdXNpb24gKFBhcnF1ZXQsIHBhcnRpdGlvbmVkKSI6dHJ1ZSwiRGF0YUZ1c2lvbiAoUGFycXVldCwgc2luZ2xlKSI6ZmFsc2UsIkFwYWNoZSBEb3JpcyI6ZmFsc2UsIkRydWlkIjpmYWxzZSwiRHVja0RCIChQYXJxdWV0LCBwYXJ0aXRpb25lZCkiOnRydWUsIkR1Y2tEQiI6ZmFsc2UsIkVsYXN0aWNzZWFyY2giOmZhbHNlLCJFbGFzdGljc2VhcmNoICh0dW5lZCkiOmZhbHNlLCJHbGFyZURCIjpmYWxzZSwiR3JlZW5wbHVtIjpmYWxzZSwiSGVhdnlBSSI6ZmFsc2UsIkh5ZHJhIjpmYWxzZSwiSW5mb2JyaWdodCI6ZmFsc2UsIktpbmV0aWNhIjpmYWxzZSwiTWFyaWFEQiBDb2x1bW5TdG9yZSI6ZmFsc2UsIk1hcmlhREIiOmZhbHNlLCJNb25ldERCIjpmYWxzZSwiTW9uZ29EQiI6ZmFsc2UsIk1vdGhlcmR1Y2siOmZhbHNlLCJNeVNRTCAoTXlJU0FNKSI6ZmFsc2UsIk15U1FMIjpmYWxzZSwiT3hsYSI6ZmFsc2UsIlBhcmFkZURCIChQYXJxdWV0LCBwYXJ0aXRpb25lZCkiOmZhbHNlLCJQYXJhZGVEQiAoUGFycXVldCwgc2luZ2xlKSI6ZmFsc2UsIlBpbm90IjpmYWxzZSwiUG9zdGdyZVNRTCAodHVuZWQpIjpmYWxzZSwiUG9zdGdyZVNRTCI6ZmFsc2UsIlF1ZXN0REIgKHBhcnRpdGlvbmVkKSI6ZmFsc2UsIlF1ZXN0REIiOmZhbHNlLCJSZWRzaGlmdCI6ZmFsc2UsIlNlbGVjdERCIjpmYWxzZSwiU2luZ2xlU3RvcmUiOmZhbHNlLCJTbm93Zmxha2UiOmZhbHNlLCJTUUxpdGUiOmZhbHNlLCJTdGFyUm9ja3MiOmZhbHNlLCJUYWJsZXNwYWNlIjpmYWxzZSwiVGVtYm8gT0xBUCAoY29sdW1uYXIpIjpmYWxzZSwiVGltZXNjYWxlREIgKGNvbXByZXNzaW9uKSI6ZmFsc2UsIlRpbWVzY2FsZURCIjpmYWxzZSwiVW1icmEiOmZhbHNlfSwidHlwZSI6eyJDIjp0cnVlLCJjb2x1bW4tb3JpZW50ZWQiOnRydWUsIlBvc3RncmVTUUwgY29tcGF0aWJsZSI6dHJ1ZSwibWFuYWdlZCI6dHJ1ZSwiZ2NwIjp0cnVlLCJzdGF0ZWxlc3MiOnRydWUsIkphdmEiOnRydWUsIkMrKyI6dHJ1ZSwiTXlTUUwgY29tcGF0aWJsZSI6dHJ1ZSwicm93LW9yaWVudGVkIjp0cnVlLCJDbGlja0hvdXNlIGRlcml2YXRpdmUiOnRydWUsImVtYmVkZGVkIjp0cnVlLCJzZXJ2ZXJsZXNzIjp0cnVlLCJhd3MiOnRydWUsInBhcmFsbGVsIHJlcGxpY2FzIjp0cnVlLCJBenVyZSI6dHJ1ZSwiYW5hbHl0aWNhbCI6dHJ1ZSwiUnVzdCI6dHJ1ZSwic2VhcmNoIjp0cnVlLCJkb2N1bWVudCI6dHJ1ZSwic29tZXdoYXQgUG9zdGdyZVNRTCBjb21wYXRpYmxlIjp0cnVlLCJ0aW1lLXNlcmllcyI6dHJ1ZX0sIm1hY2hpbmUiOnsiMTYgdkNQVSAxMjhHQiI6dHJ1ZSwiOCB2Q1BVIDY0R0IiOnRydWUsInNlcnZlcmxlc3MiOnRydWUsIjE2YWN1Ijp0cnVlLCJjNmEuNHhsYXJnZSwgNTAwZ2IgZ3AyIjp0cnVlLCJMIjp0cnVlLCJNIjp0cnVlLCJTIjp0cnVlLCJYUyI6dHJ1ZSwiYzZhLm1ldGFsLCA1MDBnYiBncDIiOnRydWUsIjE5MkdCIjp0cnVlLCIyNEdCIjp0cnVlLCIzNjBHQiI6dHJ1ZSwiNDhHQiI6dHJ1ZSwiNzIwR0IiOnRydWUsIjk2R0IiOnRydWUsIjE0MzBHQiI6dHJ1ZSwiZGV2Ijp0cnVlLCI3MDhHQiI6dHJ1ZSwiYzVuLjR4bGFyZ2UsIDUwMGdiIGdwMiI6dHJ1ZSwiQW5hbHl0aWNzLTI1NkdCICg2NCB2Q29yZXMsIDI1NiBHQikiOnRydWUsImM1LjR4bGFyZ2UsIDUwMGdiIGdwMiI6dHJ1ZSwiYzZhLjR4bGFyZ2UsIDE1MDBnYiBncDIiOnRydWUsImNsb3VkIjp0cnVlLCJkYzIuOHhsYXJnZSI6dHJ1ZSwicmEzLjE2eGxhcmdlIjp0cnVlLCJyYTMuNHhsYXJnZSI6dHJ1ZSwicmEzLnhscGx1cyI6dHJ1ZSwiUzIiOnRydWUsIlMyNCI6dHJ1ZSwiMlhMIjp0cnVlLCIzWEwiOnRydWUsIjRYTCI6dHJ1ZSwiWEwiOnRydWUsIkwxIC0gMTZDUFUgMzJHQiI6dHJ1ZSwiYzZhLjR4bGFyZ2UsIDUwMGdiIGdwMyI6dHJ1ZX0sImNsdXN0ZXJfc2l6ZSI6eyIxIjp0cnVlLCIyIjp0cnVlLCI0Ijp0cnVlLCI4Ijp0cnVlLCIxNiI6dHJ1ZSwiMzIiOnRydWUsIjY0Ijp0cnVlLCIxMjgiOnRydWUsInNlcnZlcmxlc3MiOnRydWUsImRlZGljYXRlZCI6dHJ1ZX0sIm1ldHJpYyI6ImhvdCIsInF1ZXJpZXMiOlt0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLH">performs very well on ClickBench</a>, the level of end-to-end performance improvement using StringViewArray shows the power of this technique and, of course, is a win for DataFusion and the systems that build upon it.</p>
<p>StringView is a big project that has received tremendous community support. Specifically, we would like to thank <a href="https://github.com/tustvold"><span class="citation" data-cites="tustvold">@tustvold</span></a>, <a href="https://github.com/ariesdevil"><span class="citation" data-cites="ariesdevil">@ariesdevil</span></a>, <a href="https://github.com/RinChanNOWWW"><span class="citation" data-cites="RinChanNOWWW">@RinChanNOWWW</span></a>, <a href="https://github.com/ClSlaid"><span class="citation" data-cites="ClSlaid">@ClSlaid</span></a>, <a href="https://github.com/2010YOUY01"><span class="citation" data-cites="2010YOUY01">@2010YOUY01</span></a>, <a href="https://github.com/chloro-pn"><span class="citation" data-cites="chloro-pn">@chloro-pn</span></a>, <a href="https://github.com/a10y"><span class="citation" data-cites="a10y">@a10y</span></a>, <a href="https://github.com/Kev1n8"><span class="citation" data-cites="Kev1n8">@Kev1n8</span></a>, <a href="https://github.com/Weijun-H"><span class="citation" data-cites="Weijun-H">@Weijun-H</span></a>, <a href="https://github.com/PsiACE"><span class="citation" data-cites="PsiACE">@PsiACE</span></a>, <a href="https://github.com/tshauck"><span class="citation" data-cites="tshauck">@tshauck</span></a>, and <a href="https://github.com/xinlifoobar"><span class="citation" data-cites="xinlifoobar">@xinlifoobar</span></a> for their valuable contributions!</p>
<p>As the introduction states, “German Style Strings” is a relatively straightforward research idea that avoid some string copies and accelerates comparisons. However, applying this (great) idea in practice requires a significant investment in careful software engineering. Again, we encourage the research community to continue to help apply research ideas to industrial systems, such as DataFusion, as doing so provides valuable perspectives when evaluating future research questions for the greatest potential impact.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Benchmarked with AMD Ryzen 7600x (12 core, 24 threads, 32 MiB L3), WD Black SN770 NVMe SSD (5150MB/4950MB seq RW bandwidth)↩︎</p></li>
<li id="fn2"><p>There is also a corresponding <em>BinaryViewArray</em> which is similar except that the data is not constrained to be UTF-8 encoded strings.↩︎</p></li>
<li id="fn3"><p>We also make sure that offsets do not break a UTF-8 code point, which is <a href="https://github.com/apache/arrow-rs/blob/master/parquet/src/arrow/buffer/offset_buffer.rs#L62-L71">cheaply validated</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://blog.haoxp.xyz/posts/string-view-datafusion/</guid>
  <pubDate>Fri, 13 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>My research statement</title>
  <link>https://blog.haoxp.xyz/posts/research-statement/</link>
  <description><![CDATA[ 





<section id="north-star" class="level3">
<h3 class="anchored" data-anchor-id="north-star">North star</h3>
<p><img src="https://blog.haoxp.xyz/posts/research-statement/20240808145348.png" class="img-fluid"></p>
<p>Research should connect to real people.</p>
</section>
<section id="impact-definition" class="level3">
<h3 class="anchored" data-anchor-id="impact-definition">Impact definition</h3>
<p>Research impact is defined by the number of connections between the paper and the users.</p>
<p>Note that the research paper itself does not produce an impact, as nobody’s life is changed because of reading a paper—we are not philosophers. This means that the research impact is always indirect; we have to apply the research to a system with real users.</p>
<p>Due to the indirect nature of the research’s impact, some effort must be made to connect the research to users.</p>
<p>My take: Researchers should take a holistic approach, seamlessly threading their work from the research paper to individual users.</p>
</section>
<section id="no-goals" class="level3">
<h3 class="anchored" data-anchor-id="no-goals">No-goals</h3>
<p>No goals help define goals. I’ve made all three types of mistakes, and this is my self-reflection to avoid repeating them.</p>
<p><img src="https://blog.haoxp.xyz/posts/research-statement/20240808113448.png" class="img-fluid"> We are tempted to work on projects proven to be publishable, e.g., improving an existing published method. However, it is not uncommon to see chains of research papers working on a topic irrelevant to the rest of the world. In other words, the impact of a research paper is not defined by how many papers cite it.</p>
<p><img src="https://blog.haoxp.xyz/posts/research-statement/20240808145432.png" class="img-fluid"> Researchers have the privilege to go wild and think big. But this privilege can be misused. Often, it is used to fool ourselves. Some research (e.g., physics and math) are/can be far from users, but not computer science – one of <em>applied science</em>. As applied scientists, we must ensure our “science” applies to the real world instead of just intellectual exercise.<br>
Some research (e.g., theory) in applied science still enjoys greater freedom than others. However, my research topics are outside them.</p>
<p><img src="https://blog.haoxp.xyz/posts/research-statement/20240808153415.png" class="img-fluid"> This is the most common research mistake. We often believe that researchers should focus on making good ideas, and someone else will go off to make it happen. This is not true. There are way too many good ideas, yet few are impactful.</p>
<p>Most ideas are just combinations of existing techniques, and it is hard to believe anything fundamental will be discovered in system research.</p>
<p>Most importantly, a good idea evolves with the system it builds upon. It is a feedback loop that tries, fails, and repeats. And the great idea that comes out of the system always differs from its initial version. It is never the case that the research flow is a single-directional graph with no feedback from downstream users.</p>
</section>
<section id="todays-problem-vs-tomorrows-problem" class="level3">
<h3 class="anchored" data-anchor-id="todays-problem-vs-tomorrows-problem">Today’s problem vs tomorrow’s problem</h3>
<p>Both types of problems are important and meaningful. I don’t work on tomorrow’s problems (but I agree that someone must work on future problems).</p>
<p>Why not work on future problems:</p>
<ul>
<li><p>We have enough of today’s problems to work on.</p></li>
<li><p>It’s easier to fool ourselves while working on future problems.</p></li>
</ul>
<p>Don’t fool ourselves:</p>
<ul>
<li><p>We like tomorrow’s problem because it’s easier to claim novelty – future problems naturally come with novelty.</p></li>
<li><p>We like tomorrow’s problem because we don’t have to establish user connections. Instead, we use it as an excuse to avoid working on the most important and challenging parts. We are free to propose anything we want, work around any challenges, and eventually disconnect from the rest of the world.</p></li>
<li><p>How do we avoid imaginary research? How can we ensure today’s solution is not funny when tomorrow’s problem arrives? Why work on it when future researchers will beat today’s solution with much more practical considerations?</p></li>
</ul>
</section>
<section id="engineering-problem-vs-research-problem" class="level3">
<h3 class="anchored" data-anchor-id="engineering-problem-vs-research-problem">Engineering problem vs research problem</h3>
<p><img src="https://blog.haoxp.xyz/posts/research-statement/20240821153927.png" class="img-fluid"> My take on research vs engineering problems:</p>
<ul>
<li><p><em>All</em> engineering problems are meaningful as they come from users and practitioners—no one invented them out of thin air.</p></li>
<li><p><em>All</em> research problems are publishable by definition.</p></li>
<li><p><em>Most</em> engineering problems are also research problems, evidenced by the fact that they haven’t been solved — meaning they are challenging, resource-consuming, or require a deep understanding of practical nuances, which are the definitions of <em>research problems</em>.</p></li>
<li><p>Research problems, without being grounded by engineering problems, are unlikely to be meaningful.</p></li>
</ul>
</section>
<section id="why-this-statement" class="level3">
<h3 class="anchored" data-anchor-id="why-this-statement">Why this statement?</h3>
<p>I probably only need to publish one more paper to graduate, as I have already published two papers in VLDB/SIGMOD. Moreover, my chance to stay in academia is quite low, meaning that this one-more-paper is likely the last paper I drive to publish in my career.</p>
<p>I have lots of cool ideas, but I have to choose only one. This statement helps me to crystalize my thoughts when deciding what to work on. It would be great if I knew all of these early in my Ph.D., but it is still not too late to write them down.</p>
<p>I can get lost when struggling to publish a paper or being determined to secure a faculty job. Everyone starts with the intention of doing meaningful research, but practical considerations forced them to do otherwise. If I encounter those situations (again), this statement would remind me of my north star.</p>
<!-- 
### Practical considerations
I have declared to do and not to do. But it is easier to say than execute. 
Everyone wanted impactful research, yet few had the power to stay unchanged. 
Below is my attempt.



Some of these are more of "ultimate life goals" rather than "research goals." Those are things that I believe a reasonable person in this society should pursue. One should definitely optimize for global goals rather than local goals.

With that said, local-goals often conflict with global-goals. For example, if the local-goal is to "publish enough to get tenure", then that goal might conflict with the goal of "do good research", or "be a reasonable person".

This process is alienation. Where people in the small community are trained to work towards a goal that is not properly aligned with the social goal or their global goal. When this happens, we either leave the community, or do whatever possible to make sure the goals are aligned.

That's why we need to write down our thoughts and make sure we do not fool ourselves and have enough resource to fight against alienation.

The value of axioms is that it provides a north star to where we want to go, we might need to deviate the route a bit to get somewhere, but we want to make sure we are on the right path in the long run.


Axioms are only meaningful when goals are conflicting with each other.

Example 1:
We designed a fancy new data structure that performs super well in our benchmark. And of course we published a paper in top tier conferences. And we just tell others "here's the great idea" and of course they can go off and reimplement it and use it in production.




#### How about failed projects

### Not attacking junior researchers
everyone make mistakes. we improve ourselves by making mistakes. And the research communities train junior researchers by allowing them to make mistakes.
This is my research statement, and it should not be used to attack anyone else. By reading this statement you agree that our planet is large enough to allow people with different opinions live.
### Counter arguments
Research teams explores different path, and provide intelligence when we need to choose one.
In this case, researcher should still be connected to users on every path they explores. If a path is not connected to any user, why would it waste time exploring it? -->


</section>

 ]]></description>
  <guid>https://blog.haoxp.xyz/posts/research-statement/</guid>
  <pubDate>Wed, 21 Aug 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>InfluxData &gt; Google and Microsoft</title>
  <link>https://blog.haoxp.xyz/posts/working-at-influxdata/</link>
  <description><![CDATA[ 





<p>I have interned at Google, Microsoft (Research), and InfluxData. The experience at InfluxData has been the most enjoyable, and this blog post explains why.</p>
<p>Smaller companies are more <strong>connected</strong> to the real business, more <strong>connected</strong> within the company, and more willing to <strong>connect</strong> you to the rest of the world.</p>
<section id="problem-definition" class="level2">
<h2 class="anchored" data-anchor-id="problem-definition">Problem definition</h2>
<p><strong>Non-problems</strong></p>
<p>I have worked on great projects: (1) auto-tuned BigTable, (2) designed a new B-Tree system, and (3) <a href="https://www.youtube.com/watch?v=RVLshX6fbds">implemented StringView</a> in DataFusion.</p>
<p>I have met great people: <a href="https://www.cs.cmu.edu/~yixinluo/">Yixin Luo</a>, <a href="https://www.microsoft.com/en-us/research/people/badrishc/">Badrish Chandramouli</a>, and <a href="http://andrew.nerdnetworks.org">Andrew Lamb</a>. They are professional and helpful, and I learned a lot from them.</p>
<p><strong>The problem</strong></p>
<p>The problem is <em>connectivity</em>: Is the project connected to the real product/customer? Am I connected to the company? Am I connected to the rest of the world?</p>
<p>Big tech has systematic cultural issues that prevent each individual from being connected, and there’s no easy way to fix it.</p>
</section>
<section id="connect-to-business" class="level2">
<h2 class="anchored" data-anchor-id="connect-to-business">Connect to business</h2>
<p>I have constantly been reminded to connect my intern project to the InfluxData business – how it improves InfluxDB3.0, what Influx queries it can accelerate, how it compares with the current approaches, etc.</p>
<p>Andrew expects my project to deploy in production rather than behind a feature gate that no one uses, and he worked very hard to make it happen. Andrew also reminded me to connect my presentation to InfluxDB3.0 and discuss how it benefits the product.</p>
<p>This is an important feeling of real – I’m not being paid to work on a toy exploration, not a project that requires five extra teams to reach customers. Instead, it is a project grounded by real systems and real needs, and it will be running as part of a real product.</p>
<p>Being real means my time and efforts are respected and valued. Most importantly, it means the investment is sustainable because some kind of return is expected.</p>
</section>
<section id="connect-to-peers" class="level2">
<h2 class="anchored" data-anchor-id="connect-to-peers">Connect to peers</h2>
<p>Despite being a remote-only company, InfluxData is highly connected: cross-team collaborations, company-wide acknowledgments for great work, and short turn-around for approval.</p>
<p>I only learned to appreciate the above after seeing teams fighting for the same project, achievements downplayed due to politics, and bureaucratic processes blocking individual growth.</p>
<p>Connecting to peers means working with real people, rather than a faceless bureaucratic system. You work towards a shared goal, not a surprise order from high above. When unexpected happens, you know who to talk to, and you can reason the consequences by common sense, not with a rule book or guessing what the boss wants.</p>
<p>Being treated as a respected individual, rather than some resource/tool/refillable, is sometimes more important than being paid well.</p>
</section>
<section id="connect-to-the-world" class="level2">
<h2 class="anchored" data-anchor-id="connect-to-the-world">Connect to the world</h2>
<p>Big techs have trust and ego issues. They develop/control their own programming languages, frameworks, platforms, etc. They do not sincerely share with the rest of the world, and they design procedures to prevent individuals from doing so. This means your work is only visible to a small group of people, even if it could have a much broader impact.</p>
<p>At InfluxData, I have seen the opposite. Not only is all of my work open source, but the company is actively helping me share it on the company blog, X, and LinkedIn. Andrew even took me to a DataFusion meetup and introduced me to the larger FDAP community. (Meanwhile, Microsoft asks students to pay the travel fee to present company work at conferences)</p>
<p>Open source at InfluxData means not simply moving the repo to the public domain but sincerely engaging with the community, cultivating an environment where everyone is welcome to contribute, and making sure the goals and intentions are clear and well-communicated. As an example, Andrew and I have spent an extensive amount of time writing the blog post and trying our best to share what we have learned with the community, while we could have just merged the PR and moved forward.</p>
</section>
<section id="what-prevents-a-connected-culture" class="level2">
<h2 class="anchored" data-anchor-id="what-prevents-a-connected-culture">What prevents a connected culture?</h2>
<p>Small companies don’t automatically gain a connected culture, but I can tell that InfluxData and Andrew have made deliberate efforts to make it happen.</p>
<p>Large companies, on the other hand, have systematic issues that prevent this connected culture. Even though every individual I met at Google and Microsoft was nice and kind, there’s little they can do to fix the problem from the <a href="https://en.wikipedia.org/wiki/The_Trial">faceless bureaucratic system</a> – you can’t even name a person to blame; it is the procedure.</p>
<p>One of my dreams is to create an employee-first company that prioritizes respect for individuals, explores new ways to organize and connect people, and focuses on maximizing their happiness and creativity rather than just pursuing profit.</p>
<p>(I’d like to thank <a href="https://xuanwo.io">Xuanwo</a> for encouraging me to finish this blog post!)</p>


</section>

 ]]></description>
  <guid>https://blog.haoxp.xyz/posts/working-at-influxdata/</guid>
  <pubDate>Sun, 18 Aug 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Three types of good academic advisors</title>
  <link>https://blog.haoxp.xyz/posts/good-advisor/</link>
  <description><![CDATA[ 





<section id="good-advisors" class="level2">
<h2 class="anchored" data-anchor-id="good-advisors">Good advisors</h2>
<p>Innovators, educators, and entrepreneurs.</p>
<p><strong>Innovator</strong>: good at finding the right thing to do. They have a clear vision of what important problems are. They are often smart people who deeply understand the problems they work on. Students learn a lot about their methodologies, visions, and ways of thinking/reasoning. Example: <a href="https://en.wikipedia.org/wiki/Michael_Stonebraker">Mike Stonebraker</a>.</p>
<p><strong>Educator</strong>: good at teaching and empowering the students. They empower their student to reach their potential and to find what they are good at. They motivate their students and ignite their passions. Example: <a href="https://pages.cs.wisc.edu/~remzi/">Remzi H. Arpaci-Dusseau</a>(likely also <a href="https://pages.cs.wisc.edu/~dusseau/">Andrea C. Arpaci-Dusseau</a>, but I haven’t worked with her).</p>
<p><strong>Entrepreneur</strong>: good at resource acquisition and allocation. Students have enough resources to reach their potential. They connect people and match the right students with the right resources. Example: <a href="https://www.cs.utexas.edu/~akella/">Aditya Akella</a>.</p>
<p>A good advisor doesn’t necessarily have to be in only one category (e.g., advisors above span multiple categories). Still, a good advisor often has to be in at least one of the categories.</p>
<p>I’m privileged enough to have worked with all three types of good advisors; however, finding a good advisor requires a lot of luck and effort. Reality check: many faculty members (especially in prestigious universities) are not in any of the categories, and among them, most don’t even try to be a good advisor.</p>
</section>
<section id="signs-of-bad-advisors" class="level2">
<h2 class="anchored" data-anchor-id="signs-of-bad-advisors">Signs of bad advisors</h2>
<blockquote class="blockquote">
<p>All happy families are alike; each unhappy family is unhappy in its own way. – Leo Tolstoy</p>
</blockquote>
<p>Like unhappy families, bad advisors are pretty novel in their ways of being bad; we don’t summarize them here. Instead, we list some key symptoms of working with a bad advisor.</p>
<ol type="1">
<li><strong>Long time-to-recovery</strong>, i.e., too long to recover from a meeting with your advisor.</li>
</ol>
<p>Regular meetings with your advisor can be stressful; often the time you need to prepare many slides, teach your advisor about your work, and try to get some feedback. Often, especially in the early stages of your Ph.D., you don’t have good presentation/communication skills to explain your work to your advisor. Your advisor can get impatient and think you are not progressing or working hard enough.</p>
<p>This can be frustrating and demotivating, and this pattern repeats every week. The question is, how long does it take to recover from this meeting? I have experienced that it can take a few hours, or even an entire day, to recover from the frustration and continue to work on my research. However, it does not have to be this way; a good advisor can motivate students and give concrete feedback to help them improve.</p>
<ol start="2" type="1">
<li><strong>Not being treated like a human</strong>, but a tool/machine to generate papers.</li>
</ol>
<p>Graduate students are first humans, then students, and then researchers, but never tools/machines to generate papers.</p>
<p>Most bad advisors treat their students as leverage to fulfill their own goals. They often have very concrete expectations from their students: publish X papers in Y top-tier conferences/journals and work on Z topics with W skill sets. They evaluate their student by whether they can meet those expectations; even worse, those expectations are often inexplicit and change over time.</p>
<p>If students lag behind expectations – which happens all the time – they are often blamed for not working hard enough or not being smart enough. Worse, they will be threatened to delay graduation, withdraw funding, or even be kicked out of the program. Even if students are on track, they are often not appreciated for their hard work and dedication. They are given more work to do, and the cycle repeats.</p>
<p>Graduate study is a long journey; without being treated like a real human, you <strong>feel</strong> suffering, lonely, and lost. But you deserve a supportive, fruitful, and enjoyable PhD study.</p>
<ol start="3" type="1">
<li><strong>Not aware of power dynamics</strong>, but you are my boss.</li>
</ol>
<p>Many people dreamed an advisor-advisee relationship would be like a marriage partnership: they respect, trust, and work together to achieve common goals.</p>
<p>But that is never the case in reality; advisors pay their students’ salaries, and they can decide when they can graduate. The conversation between an advisor and a student is never equal, and the power dynamics are always there.</p>
<p>The real challenge is whether the advisor is aware of these power dynamics and how they use them. When in disagreement, does the student have the real freedom to say no? Does the advisor sincerely feel comfortable to be challenged? Navigating these power dynamics is art for both students and advisors, but it’s on the advisors to practice and ensure students feel safe and respected.</p>
</section>
<section id="self-reflections" class="level2">
<h2 class="anchored" data-anchor-id="self-reflections">Self-reflections</h2>
<p>It’s easy to blame bad advisors, but it is hard not to become one.</p>
<p>I suffered a lot from bad advisors, but I often wonder if I can be better than them. Toxic advisors result from systematic academia problems, and changing the system is hard. That’s why good advisors are rare and worth being recognized and appreciated.</p>
<p>When pressured with tenure, funding, and publication, will I be as nice/patient/motivating/caring as I imagined myself to be?</p>


</section>

 ]]></description>
  <guid>https://blog.haoxp.xyz/posts/good-advisor/</guid>
  <pubDate>Tue, 07 May 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>What happens when you type a SQL in the database</title>
  <link>https://blog.haoxp.xyz/posts/sql-to-results/</link>
  <description><![CDATA[ 





<section id="preface" class="level2">
<h2 class="anchored" data-anchor-id="preface">Preface</h2>
<p>A database can be complex; it involves almost all aspects (research communities) of computer science: PL (programming language), SE (software engineering), OS (operating system), networking, storage, theory; more recently, NLP (natural language processing), and ML (machine learning). The database community is centered around the people interested in making the database (the product) better instead of pure intellectual/research interests; it is, therefore, a practical and multi-disciplinary field. This makes databases awesome but also hard to learn.</p>
<p>As complex as it is, the boundaries of the building blocks within a database are clear after decades of research and real-world operations. The recent (and state-of-the-art) <a href="https://github.com/apache/datafusion">Apache DataFusion</a> project is a good example of building a database using well-defined industry standards like <a href="https://arrow.apache.org">Apache Arrow</a>, and <a href="https://parquet.apache.org">Apache Parquet</a>. Without home-grown solutions for storage and in-memory representation, DataFusion can be <a href="https://github.com/apache/datafusion/files/15149988/DataFusion_Query_Engine___SIGMOD_2024-FINAL-mk4.pdf">comparable or even better</a> than alternatives like <a href="https://github.com/duckdb/duckdb">DuckDB</a>.</p>
<p>This document aims to explain these well-defined boundaries, namely, how query engines (i.e., <a href="https://aws.amazon.com/compare/the-difference-between-olap-and-oltp">OLAP</a>) transform a plain SQL query into the results we want, how every step works, and how they are connected.</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart LR
   id1[SQL text] --&gt; |SQL parser| id2[SQL statement] 
   id2 --&gt; |Query planner| id3[Logical plan] --&gt; |Query optimizer| id4[Optimized logical plan] --&gt; |Physical planner| id5
   id5[Physical plan] --&gt; |Execution| id7[Output]

</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>This is a blog post I hoped I knew when I was younger.</p>
<p>I aim to make multi-year efforts to edit and improve it as I learn more about databases. I sometimes dreamed that this post could evolve to be the database equivalent of the <a href="https://pages.cs.wisc.edu/~remzi/OSTEP/">OSTEP</a> book (it might be too ambitious, though).</p>
</div>
</div>
</section>
<section id="section-1-end-to-end-view" class="level2">
<h2 class="anchored" data-anchor-id="section-1-end-to-end-view">Section 1: End-To-End View</h2>
<section id="input" class="level3">
<h3 class="anchored" data-anchor-id="input">Input</h3>
<section id="table-definition" class="level4">
<h4 class="anchored" data-anchor-id="table-definition">Table definition</h4>
<p>We have the following two tables (adapted from <a href="https://www.tpc.org/tpc_documents_current_versions/pdf/tpc-h_v2.17.1.pdf">TPC-H spec</a>): <code>lineitem</code> and <code>orders</code>. The <code>lineitem</code> defines the the shipment dates, while the <code>order</code> defines order details.</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">erDiagram
  lineitem {
      int l_orderkey
      int l_linenumber
      date l_shipdate
      date l_commitdate
      date l_receiptdate
      string l_shipmode
      string l_comment
  }
  orders {
      int o_orderkey
      date o_orderdate
      string o_orderpriority
      string o_clerk
      string o_comment
  }
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</section>
<section id="sql-query" class="level4">
<h4 class="anchored" data-anchor-id="sql-query">SQL query</h4>
<p>Let’s say we have this simple query (adapted from <a href="https://github.com/apache/datafusion/blob/main/benchmarks/queries/q5.sql">TPC-H query 5</a>), which finds the <code>l_orderkey</code>, <code>l_shipdate</code>, and <code>o_orderdate</code> of orders that were placed in <code>1994</code>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span></span>
<span id="cb1-2">    l_orderkey, l_shipdate, o_orderdate</span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span></span>
<span id="cb1-4">    orders</span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">JOIN</span></span>
<span id="cb1-6">    lineitem <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ON</span> l_orderkey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> o_orderkey</span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span></span>
<span id="cb1-8">    o_orderdate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DATE</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1994-01-01'</span></span>
<span id="cb1-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AND</span> o_orderdate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DATE</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1995-01-01'</span>;</span></code></pre></div>
</section>
</section>
<section id="output" class="level3">
<h3 class="anchored" data-anchor-id="output">Output</h3>
<p>The query is pretty simple; it joins two tables on the order key and then filters the results based on the order date. If everything goes well, we should get results similar to this:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb2-1">+------------+------------+-------------+</span>
<span id="cb2-2">| l_orderkey | l_shipdate | o_orderdate |</span>
<span id="cb2-3">+------------+------------+-------------+</span>
<span id="cb2-4">| 1          | 1994-06-01 | 1994-05-01  |</span>
<span id="cb2-5">+------------+------------+-------------+</span></code></pre></div>
</section>
</section>
<section id="section-2-parsing" class="level2">
<h2 class="anchored" data-anchor-id="section-2-parsing">Section 2: Parsing</h2>
<p>I skipped it for now as it is mostly orthogonal to the data system pipelines.</p>
<section id="input-1" class="level4">
<h4 class="anchored" data-anchor-id="input-1">Input</h4>
<p>The SQL query text.</p>
</section>
<section id="output-1" class="level4">
<h4 class="anchored" data-anchor-id="output-1">Output</h4>
<p>Structured <a href="https://docs.rs/datafusion/37.1.0/datafusion/sql/parser/enum.Statement.html"><code>statement</code></a> from the SQL (significantly simplified for brevity):</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb3-1">from: [</span>
<span id="cb3-2">  TableWithJoins {</span>
<span id="cb3-3">    relation: Table {</span>
<span id="cb3-4">      name: ObjectName([</span>
<span id="cb3-5">        Ident {</span>
<span id="cb3-6">          value: "orders",</span>
<span id="cb3-7">          quote_style: None,</span>
<span id="cb3-8">        },</span>
<span id="cb3-9">      ]),</span>
<span id="cb3-10">    },</span>
<span id="cb3-11">    joins: [</span>
<span id="cb3-12">      Join {</span>
<span id="cb3-13">        relation: Table {</span>
<span id="cb3-14">          name: ObjectName([</span>
<span id="cb3-15">            Ident {</span>
<span id="cb3-16">              value: "lineitem",</span>
<span id="cb3-17">              quote_style: None,</span>
<span id="cb3-18">            },</span>
<span id="cb3-19">          ]),</span>
<span id="cb3-20">        },</span>
<span id="cb3-21">        join_operator: Inner(</span>
<span id="cb3-22">          On(</span>
<span id="cb3-23">            BinaryOp {</span>
<span id="cb3-24">              left: Identifier(</span>
<span id="cb3-25">                Ident {</span>
<span id="cb3-26">                  value: "l_orderkey",</span>
<span id="cb3-27">                  quote_style: None,</span>
<span id="cb3-28">                },</span>
<span id="cb3-29">              ),</span>
<span id="cb3-30">              op: Eq,</span>
<span id="cb3-31">              right: Identifier(</span>
<span id="cb3-32">                Ident {</span>
<span id="cb3-33">                  value: "o_orderkey",</span>
<span id="cb3-34">                  quote_style: None,</span>
<span id="cb3-35">                },</span>
<span id="cb3-36">              ),</span>
<span id="cb3-37">            },</span>
<span id="cb3-38">          ),</span>
<span id="cb3-39">        ),</span>
<span id="cb3-40">      },</span>
<span id="cb3-41">    ],</span>
<span id="cb3-42">  },</span>
<span id="cb3-43">],</span>
<span id="cb3-44">selection: Some(</span>
<span id="cb3-45">  BinaryOp {</span>
<span id="cb3-46">    left: BinaryOp {</span>
<span id="cb3-47">      left: Identifier(</span>
<span id="cb3-48">        Ident {</span>
<span id="cb3-49">          value: "o_orderdate",</span>
<span id="cb3-50">          quote_style: None,</span>
<span id="cb3-51">        },</span>
<span id="cb3-52">      ),</span>
<span id="cb3-53">      op: GtEq,</span>
<span id="cb3-54">      right: TypedString {</span>
<span id="cb3-55">        data_type: Date,</span>
<span id="cb3-56">        value: "1994-01-01",</span>
<span id="cb3-57">      },</span>
<span id="cb3-58">    },</span>
<span id="cb3-59">    op: And,</span>
<span id="cb3-60">    right: BinaryOp {</span>
<span id="cb3-61">      left: Identifier(</span>
<span id="cb3-62">        Ident {</span>
<span id="cb3-63">          value: "o_orderdate",</span>
<span id="cb3-64">          quote_style: None,</span>
<span id="cb3-65">        },</span>
<span id="cb3-66">      ),</span>
<span id="cb3-67">      op: Lt,</span>
<span id="cb3-68">      right: TypedString {</span>
<span id="cb3-69">        data_type: Date,</span>
<span id="cb3-70">        value: "1995-01-01",</span>
<span id="cb3-71">      },</span>
<span id="cb3-72">    },</span>
<span id="cb3-73">  },</span>
<span id="cb3-74">),</span></code></pre></div>
</section>
</section>
<section id="section-3-query-planning" class="level2">
<h2 class="anchored" data-anchor-id="section-3-query-planning">Section 3: Query Planning</h2>
<section id="input-2" class="level4">
<h4 class="anchored" data-anchor-id="input-2">Input</h4>
<p>The query statement from the last step.</p>
</section>
<section id="output-2" class="level4">
<h4 class="anchored" data-anchor-id="output-2">Output</h4>
<p>The logical query plan is something like this:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb4-1">Projection: lineitem.l_orderkey, lineitem.l_shipdate, orders.o_orderdate</span>
<span id="cb4-2">  Filter: orders.o_orderdate &gt;= CAST(Utf8("1994-01-01") AS Date32) AND orders.o_orderdate &lt; CAST(Utf8("1995-01-01") AS Date32)</span>
<span id="cb4-3">    Inner Join:  Filter: lineitem.l_orderkey = orders.o_orderkey</span>
<span id="cb4-4">      TableScan: orders</span>
<span id="cb4-5">      TableScan: lineitem</span></code></pre></div>
<p>Plot it as a tree.</p>
<div class="cell" data-fig-height="2" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<svg width="672" height="192" viewbox="0.00 0.00 796.91 260.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 256)">
<polygon fill="white" stroke="transparent" points="-4,4 -4,-256 792.91,-256 792.91,4 -4,4"></polygon>
<!-- 2 -->
<g id="node1" class="node">
<title>2</title>
<polygon fill="none" stroke="black" points="603.17,-252 185.74,-252 185.74,-216 603.17,-216 603.17,-252"></polygon>
<text text-anchor="middle" x="394.46" y="-229.8" font-family="Times,serif" font-size="14.00">Projection: lineitem.l_orderkey, lineitem.l_shipdate, orders.o_orderdate</text>
</g>
<!-- 3 -->
<g id="node2" class="node">
<title>3</title>
<polygon fill="none" stroke="black" points="788.87,-180 0.04,-180 0.04,-144 788.87,-144 788.87,-180"></polygon>
<text text-anchor="middle" x="394.46" y="-157.8" font-family="Times,serif" font-size="14.00">Filter: orders.o_orderdate &gt;= CAST(Utf8(_1994-01-01_) AS Date32) AND orders.o_orderdate &lt; CAST(Utf8(_1995-01-01_) AS Date32)</text>
</g>
<!-- 2&#45;&gt;3 -->
<g id="edge1" class="edge">
<title>2-&gt;3</title>
<path fill="none" stroke="black" d="M394.46,-205.67C394.46,-197.05 394.46,-187.79 394.46,-180.1"></path>
<polygon fill="black" stroke="black" points="390.96,-205.7 394.46,-215.7 397.96,-205.7 390.96,-205.7"></polygon>
</g>
<!-- 4 -->
<g id="node3" class="node">
<title>4</title>
<polygon fill="none" stroke="black" points="568.59,-108 220.32,-108 220.32,-72 568.59,-72 568.59,-108"></polygon>
<text text-anchor="middle" x="394.46" y="-85.8" font-family="Times,serif" font-size="14.00">Inner Join: &nbsp;Filter: lineitem.l_orderkey = orders.o_orderkey</text>
</g>
<!-- 3&#45;&gt;4 -->
<g id="edge2" class="edge">
<title>3-&gt;4</title>
<path fill="none" stroke="black" d="M394.46,-133.67C394.46,-125.05 394.46,-115.79 394.46,-108.1"></path>
<polygon fill="black" stroke="black" points="390.96,-133.7 394.46,-143.7 397.96,-133.7 390.96,-133.7"></polygon>
</g>
<!-- 5 -->
<g id="node4" class="node">
<title>5</title>
<polygon fill="none" stroke="black" points="383.42,-36 265.5,-36 265.5,0 383.42,0 383.42,-36"></polygon>
<text text-anchor="middle" x="324.46" y="-13.8" font-family="Times,serif" font-size="14.00">TableScan: orders</text>
</g>
<!-- 4&#45;&gt;5 -->
<g id="edge3" class="edge">
<title>4-&gt;5</title>
<path fill="none" stroke="black" d="M369.93,-64.48C360.56,-55.11 350.09,-44.64 341.56,-36.1"></path>
<polygon fill="black" stroke="black" points="367.61,-67.1 377.15,-71.7 372.56,-62.15 367.61,-67.1"></polygon>
</g>
<!-- 6 -->
<g id="node5" class="node">
<title>6</title>
<polygon fill="none" stroke="black" points="529.81,-36 401.11,-36 401.11,0 529.81,0 529.81,-36"></polygon>
<text text-anchor="middle" x="465.46" y="-13.8" font-family="Times,serif" font-size="14.00">TableScan: lineitem</text>
</g>
<!-- 4&#45;&gt;6 -->
<g id="edge4" class="edge">
<title>4-&gt;6</title>
<path fill="none" stroke="black" d="M419.33,-64.48C428.83,-55.11 439.45,-44.64 448.11,-36.1"></path>
<polygon fill="black" stroke="black" points="416.67,-62.18 412.01,-71.7 421.58,-67.17 416.67,-62.18"></polygon>
</g>
</g>
</svg>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>Logical vs physical.</p>
<p>Todo: describe why we must distinguish between physical and logical plans.</p>
</section>
</section>
<section id="section-4-query-optimizing" class="level2">
<h2 class="anchored" data-anchor-id="section-4-query-optimizing">Section 4: Query Optimizing</h2>
<section id="input-3" class="level4">
<h4 class="anchored" data-anchor-id="input-3">Input</h4>
<p>The (unoptimized) logical plan from the last step.</p>
</section>
<section id="output-3" class="level4">
<h4 class="anchored" data-anchor-id="output-3">Output</h4>
<p>An optimized logical plan.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb5-1">Projection: lineitem.l_orderkey, lineitem.l_shipdate, orders.o_orderdate</span>
<span id="cb5-2">  Inner Join: orders.o_orderkey = lineitem.l_orderkey</span>
<span id="cb5-3">    Filter: orders.o_orderdate &gt;= Date32("8766") AND orders.o_orderdate &lt; Date32("9131")</span>
<span id="cb5-4">      TableScan: orders projection=[o_orderkey, o_orderdate], partial_filters=[orders.o_orderdate &gt;= Date32("8766"), orders.o_orderdate &lt; Date32("9131")]</span>
<span id="cb5-5">    TableScan: lineitem projection=[l_orderkey, l_shipdate]</span></code></pre></div>
<div class="cell" data-fig-height="2" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<svg width="672" height="192" viewbox="0.00 0.00 1054.03 260.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 256)">
<polygon fill="white" stroke="transparent" points="-4,4 -4,-256 1050.03,-256 1050.03,4 -4,4"></polygon>
<!-- 2 -->
<g id="node1" class="node">
<title>2</title>
<polygon fill="none" stroke="black" points="866.24,-252 448.81,-252 448.81,-216 866.24,-216 866.24,-252"></polygon>
<text text-anchor="middle" x="657.53" y="-229.8" font-family="Times,serif" font-size="14.00">Projection: lineitem.l_orderkey, lineitem.l_shipdate, orders.o_orderdate</text>
</g>
<!-- 3 -->
<g id="node2" class="node">
<title>3</title>
<polygon fill="none" stroke="black" points="810.94,-180 504.11,-180 504.11,-144 810.94,-144 810.94,-180"></polygon>
<text text-anchor="middle" x="657.53" y="-157.8" font-family="Times,serif" font-size="14.00">Inner Join: orders.o_orderkey = lineitem.l_orderkey</text>
</g>
<!-- 2&#45;&gt;3 -->
<g id="edge1" class="edge">
<title>2-&gt;3</title>
<path fill="none" stroke="black" d="M657.53,-205.67C657.53,-197.05 657.53,-187.79 657.53,-180.1"></path>
<polygon fill="black" stroke="black" points="654.03,-205.7 657.53,-215.7 661.03,-205.7 654.03,-205.7"></polygon>
</g>
<!-- 4 -->
<g id="node3" class="node">
<title>4</title>
<polygon fill="none" stroke="black" points="696.95,-108 174.1,-108 174.1,-72 696.95,-72 696.95,-108"></polygon>
<text text-anchor="middle" x="435.53" y="-85.8" font-family="Times,serif" font-size="14.00">Filter: orders.o_orderdate &gt;= Date32(_8766_) AND orders.o_orderdate &lt; Date32(_9131_)</text>
</g>
<!-- 3&#45;&gt;4 -->
<g id="edge2" class="edge">
<title>3-&gt;4</title>
<path fill="none" stroke="black" d="M593.54,-140.83C560.7,-130.47 521.12,-117.99 489.79,-108.11"></path>
<polygon fill="black" stroke="black" points="592.91,-144.3 603.5,-143.97 595.02,-137.62 592.91,-144.3"></polygon>
</g>
<!-- 6 -->
<g id="node5" class="node">
<title>6</title>
<polygon fill="none" stroke="black" points="1046.04,-108 715.01,-108 715.01,-72 1046.04,-72 1046.04,-108"></polygon>
<text text-anchor="middle" x="880.53" y="-85.8" font-family="Times,serif" font-size="14.00">TableScan: lineitem projection=[l_orderkey, l_shipdate]</text>
</g>
<!-- 3&#45;&gt;6 -->
<g id="edge4" class="edge">
<title>3-&gt;6</title>
<path fill="none" stroke="black" d="M721.37,-140.96C754.44,-130.58 794.41,-118.03 826.02,-108.11"></path>
<polygon fill="black" stroke="black" points="720.29,-137.63 711.79,-143.97 722.38,-144.31 720.29,-137.63"></polygon>
</g>
<!-- 5 -->
<g id="node4" class="node">
<title>5</title>
<polygon fill="none" stroke="black" points="871.08,-36 -0.03,-36 -0.03,0 871.08,0 871.08,-36"></polygon>
<text text-anchor="middle" x="435.53" y="-13.8" font-family="Times,serif" font-size="14.00">TableScan: orders projection=[o_orderkey, o_orderdate], partial_filters=[orders.o_orderdate &gt;= Date32(_8766_), orders.o_orderdate &lt; Date32(_9131_)]</text>
</g>
<!-- 4&#45;&gt;5 -->
<g id="edge3" class="edge">
<title>4-&gt;5</title>
<path fill="none" stroke="black" d="M435.53,-61.67C435.53,-53.05 435.53,-43.79 435.53,-36.1"></path>
<polygon fill="black" stroke="black" points="432.03,-61.7 435.53,-71.7 439.03,-61.7 432.03,-61.7"></polygon>
</g>
</g>
</svg>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>Note the difference between an unoptimized and an optimized plan! The <code>Filter</code> has been pushed down to lower-level nodes. Part of the projection has been embedded in the <code>TableScan</code>.</p>
</section>
</section>
<section id="section-5-physical-planning" class="level2">
<h2 class="anchored" data-anchor-id="section-5-physical-planning">Section 5: Physical Planning</h2>
<section id="input-4" class="level4">
<h4 class="anchored" data-anchor-id="input-4">Input</h4>
<p>A logical plan.</p>
</section>
<section id="output-4" class="level4">
<h4 class="anchored" data-anchor-id="output-4">Output</h4>
<p>A physical plan. Unlike logical plans, physical plans are more concrete about what to do; here’s an example:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb6-1">Physical plan:</span>
<span id="cb6-2">ProjectionExec: expr=[l_orderkey@1 as l_orderkey, l_shipdate@2 as l_shipdate, o_orderdate@0 as o_orderdate]</span>
<span id="cb6-3">  CoalesceBatchesExec: target_batch_size=8192</span>
<span id="cb6-4">    HashJoinExec: mode=Partitioned, join_type=Inner, on=[(o_orderkey@0, l_orderkey@0)], projection=[o_orderdate@1, l_orderkey@2, l_shipdate@3]</span>
<span id="cb6-5">      CoalesceBatchesExec: target_batch_size=8192</span>
<span id="cb6-6">        RepartitionExec: partitioning=Hash([o_orderkey@0], 8), input_partitions=8</span>
<span id="cb6-7">          CoalesceBatchesExec: target_batch_size=8192</span>
<span id="cb6-8">            FilterExec: o_orderdate@1 &gt;= 8766 AND o_orderdate@1 &lt; 9131</span>
<span id="cb6-9">              RepartitionExec: partitioning=RoundRobinBatch(8), input_partitions=1</span>
<span id="cb6-10">                CsvExec: file_groups={1 group: [[Users/xiangpeng/work/coding/db-ml/bin/example-data/orders.csv]]}, projection=[o_orderkey, o_orderdate], has_header=true</span>
<span id="cb6-11">      CoalesceBatchesExec: target_batch_size=8192</span>
<span id="cb6-12">        RepartitionExec: partitioning=Hash([l_orderkey@0], 8), input_partitions=8</span>
<span id="cb6-13">          RepartitionExec: partitioning=RoundRobinBatch(8), input_partitions=1</span>
<span id="cb6-14">            CsvExec: file_groups={1 group: [[Users/xiangpeng/work/coding/db-ml/bin/example-data/lineitem.csv]]}, projection=[l_orderkey, l_shipdate], has_header=true</span></code></pre></div>
<p>We can also plot a physical plan to a tree graph:</p>
<div class="cell" data-fig-height="4" data-fig-width="8" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<svg width="768" height="384" viewbox="0.00 0.00 1122.05 620.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 616)">
<polygon fill="white" stroke="transparent" points="-4,4 -4,-616 1118.05,-616 1118.05,4 -4,4"></polygon>
<!-- 1 -->
<g id="node1" class="node">
<title>1</title>
<polygon fill="none" stroke="black" points="895.67,-612 245.15,-612 245.15,-576 895.67,-576 895.67,-612"></polygon>
<text text-anchor="middle" x="570.41" y="-589.8" font-family="Times,serif" font-size="14.00">ProjectionExec: expr=[l_orderkey@1 as l_orderkey, l_shipdate@2 as l_shipdate, o_orderdate@0 as o_orderdate]</text>
</g>
<!-- 2 -->
<g id="node2" class="node">
<title>2</title>
<polygon fill="none" stroke="black" points="710.47,-540 430.34,-540 430.34,-504 710.47,-504 710.47,-540"></polygon>
<text text-anchor="middle" x="570.41" y="-517.8" font-family="Times,serif" font-size="14.00">CoalesceBatchesExec: target_batch_size=8192</text>
</g>
<!-- 1&#45;&gt;2 -->
<g id="edge1" class="edge">
<title>1-&gt;2</title>
<path fill="none" stroke="black" d="M570.41,-565.67C570.41,-557.05 570.41,-547.79 570.41,-540.1"></path>
<polygon fill="black" stroke="black" points="566.91,-565.7 570.41,-575.7 573.91,-565.7 566.91,-565.7"></polygon>
</g>
<!-- 3 -->
<g id="node3" class="node">
<title>3</title>
<polygon fill="none" stroke="black" points="1000.06,-468 140.76,-468 140.76,-432 1000.06,-432 1000.06,-468"></polygon>
<text text-anchor="middle" x="570.41" y="-445.8" font-family="Times,serif" font-size="14.00">HashJoinExec: mode=Partitioned, join_type=Inner, on=[(o_orderkey@0, l_orderkey@0)], projection=[o_orderdate@1, l_orderkey@2, l_shipdate@3]</text>
</g>
<!-- 2&#45;&gt;3 -->
<g id="edge2" class="edge">
<title>2-&gt;3</title>
<path fill="none" stroke="black" d="M570.41,-493.67C570.41,-485.05 570.41,-475.79 570.41,-468.1"></path>
<polygon fill="black" stroke="black" points="566.91,-493.7 570.41,-503.7 573.91,-493.7 566.91,-493.7"></polygon>
</g>
<!-- 4 -->
<g id="node4" class="node">
<title>4</title>
<polygon fill="none" stroke="black" points="561.47,-396 281.34,-396 281.34,-360 561.47,-360 561.47,-396"></polygon>
<text text-anchor="middle" x="421.41" y="-373.8" font-family="Times,serif" font-size="14.00">CoalesceBatchesExec: target_batch_size=8192</text>
</g>
<!-- 3&#45;&gt;4 -->
<g id="edge3" class="edge">
<title>3-&gt;4</title>
<path fill="none" stroke="black" d="M524.69,-427.52C503.19,-417.42 477.91,-405.54 457.74,-396.07"></path>
<polygon fill="black" stroke="black" points="523.42,-430.79 533.96,-431.88 526.4,-424.46 523.42,-430.79"></polygon>
</g>
<!-- 10 -->
<g id="node10" class="node">
<title>10</title>
<polygon fill="none" stroke="black" points="899.47,-396 619.34,-396 619.34,-360 899.47,-360 899.47,-396"></polygon>
<text text-anchor="middle" x="759.41" y="-373.8" font-family="Times,serif" font-size="14.00">CoalesceBatchesExec: target_batch_size=8192</text>
</g>
<!-- 3&#45;&gt;10 -->
<g id="edge9" class="edge">
<title>3-&gt;10</title>
<path fill="none" stroke="black" d="M626.21,-428.33C653.94,-418.06 687.05,-405.8 713.32,-396.07"></path>
<polygon fill="black" stroke="black" points="624.81,-425.12 616.64,-431.88 627.24,-431.68 624.81,-425.12"></polygon>
</g>
<!-- 5 -->
<g id="node5" class="node">
<title>5</title>
<polygon fill="none" stroke="black" points="562.11,-324 118.71,-324 118.71,-288 562.11,-288 562.11,-324"></polygon>
<text text-anchor="middle" x="340.41" y="-301.8" font-family="Times,serif" font-size="14.00">RepartitionExec: partitioning=Hash([o_orderkey@0], 8), input_partitions=8</text>
</g>
<!-- 4&#45;&gt;5 -->
<g id="edge4" class="edge">
<title>4-&gt;5</title>
<path fill="none" stroke="black" d="M393.68,-353.03C382.67,-343.52 370.27,-332.8 360.2,-324.1"></path>
<polygon fill="black" stroke="black" points="391.53,-355.81 401.39,-359.7 396.11,-350.51 391.53,-355.81"></polygon>
</g>
<!-- 6 -->
<g id="node6" class="node">
<title>6</title>
<polygon fill="none" stroke="black" points="467.47,-252 187.34,-252 187.34,-216 467.47,-216 467.47,-252"></polygon>
<text text-anchor="middle" x="327.41" y="-229.8" font-family="Times,serif" font-size="14.00">CoalesceBatchesExec: target_batch_size=8192</text>
</g>
<!-- 5&#45;&gt;6 -->
<g id="edge5" class="edge">
<title>5-&gt;6</title>
<path fill="none" stroke="black" d="M335.33,-277.67C333.73,-269.05 332.01,-259.79 330.59,-252.1"></path>
<polygon fill="black" stroke="black" points="331.93,-278.5 337.2,-287.7 338.81,-277.23 331.93,-278.5"></polygon>
</g>
<!-- 7 -->
<g id="node7" class="node">
<title>7</title>
<polygon fill="none" stroke="black" points="494.62,-180 108.19,-180 108.19,-144 494.62,-144 494.62,-180"></polygon>
<text text-anchor="middle" x="301.41" y="-157.8" font-family="Times,serif" font-size="14.00">FilterExec: o_orderdate@1 &gt;= 8766 AND o_orderdate@1 &lt; 9131</text>
</g>
<!-- 6&#45;&gt;7 -->
<g id="edge6" class="edge">
<title>6-&gt;7</title>
<path fill="none" stroke="black" d="M317.47,-206.23C314.21,-197.46 310.68,-187.96 307.76,-180.1"></path>
<polygon fill="black" stroke="black" points="314.22,-207.54 320.98,-215.7 320.78,-205.1 314.22,-207.54"></polygon>
</g>
<!-- 8 -->
<g id="node8" class="node">
<title>8</title>
<polygon fill="none" stroke="black" points="510.59,-108 92.23,-108 92.23,-72 510.59,-72 510.59,-108"></polygon>
<text text-anchor="middle" x="301.41" y="-85.8" font-family="Times,serif" font-size="14.00">RepartitionExec: partitioning=RoundRobinBatch(8), input_partitions=1</text>
</g>
<!-- 7&#45;&gt;8 -->
<g id="edge7" class="edge">
<title>7-&gt;8</title>
<path fill="none" stroke="black" d="M301.41,-133.67C301.41,-125.05 301.41,-115.79 301.41,-108.1"></path>
<polygon fill="black" stroke="black" points="297.91,-133.7 301.41,-143.7 304.91,-133.7 297.91,-133.7"></polygon>
</g>
<!-- 9 -->
<g id="node9" class="node">
<title>9</title>
<polygon fill="none" stroke="black" points="602.73,-36 0.09,-36 0.09,0 602.73,0 602.73,-36"></polygon>
<text text-anchor="middle" x="301.41" y="-13.8" font-family="Times,serif" font-size="14.00">CsvExec: file_groups={1 group: [[orders.csv]]}, projection=[o_orderkey, o_orderdate], has_header=true</text>
</g>
<!-- 8&#45;&gt;9 -->
<g id="edge8" class="edge">
<title>8-&gt;9</title>
<path fill="none" stroke="black" d="M301.41,-61.67C301.41,-53.05 301.41,-43.79 301.41,-36.1"></path>
<polygon fill="black" stroke="black" points="297.91,-61.7 301.41,-71.7 304.91,-61.7 297.91,-61.7"></polygon>
</g>
<!-- 11 -->
<g id="node11" class="node">
<title>11</title>
<polygon fill="none" stroke="black" points="1026.5,-324 586.32,-324 586.32,-288 1026.5,-288 1026.5,-324"></polygon>
<text text-anchor="middle" x="806.41" y="-301.8" font-family="Times,serif" font-size="14.00">RepartitionExec: partitioning=Hash([l_orderkey@0], 8), input_partitions=8</text>
</g>
<!-- 10&#45;&gt;11 -->
<g id="edge10" class="edge">
<title>10-&gt;11</title>
<path fill="none" stroke="black" d="M776.62,-351.36C782.72,-342.28 789.42,-332.3 794.92,-324.1"></path>
<polygon fill="black" stroke="black" points="773.7,-349.44 771.03,-359.7 779.51,-353.35 773.7,-349.44"></polygon>
</g>
<!-- 12 -->
<g id="node12" class="node">
<title>12</title>
<polygon fill="none" stroke="black" points="1018.59,-252 600.23,-252 600.23,-216 1018.59,-216 1018.59,-252"></polygon>
<text text-anchor="middle" x="809.41" y="-229.8" font-family="Times,serif" font-size="14.00">RepartitionExec: partitioning=RoundRobinBatch(8), input_partitions=1</text>
</g>
<!-- 11&#45;&gt;12 -->
<g id="edge11" class="edge">
<title>11-&gt;12</title>
<path fill="none" stroke="black" d="M807.58,-277.67C807.95,-269.05 808.35,-259.79 808.68,-252.1"></path>
<polygon fill="black" stroke="black" points="804.08,-277.56 807.15,-287.7 811.08,-277.86 804.08,-277.56"></polygon>
</g>
<!-- 13 -->
<g id="node13" class="node">
<title>13</title>
<polygon fill="none" stroke="black" points="1114.19,-180 512.62,-180 512.62,-144 1114.19,-144 1114.19,-180"></polygon>
<text text-anchor="middle" x="813.41" y="-157.8" font-family="Times,serif" font-size="14.00">CsvExec: file_groups={1 group: [[lineitem.csv]]}, projection=[l_orderkey, l_shipdate], has_header=true</text>
</g>
<!-- 12&#45;&gt;13 -->
<g id="edge12" class="edge">
<title>12-&gt;13</title>
<path fill="none" stroke="black" d="M810.97,-205.67C811.46,-197.05 811.99,-187.79 812.43,-180.1"></path>
<polygon fill="black" stroke="black" points="807.47,-205.51 810.4,-215.7 814.46,-205.91 807.47,-205.51"></polygon>
</g>
</g>
</svg>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Note that a physical plan has much more details than a logical plan; it contains everything needed to execute the query!</p>
</div>
</div>
<p>(Optional: we often have physical optimizers that optimize on a physical plan. Omitted here for simplicity)</p>
</section>
</section>
<section id="section-6-query-execution" class="level2">
<h2 class="anchored" data-anchor-id="section-6-query-execution">Section 6: Query Execution</h2>
<section id="input-5" class="level4">
<h4 class="anchored" data-anchor-id="input-5">Input</h4>
<p>A physical plan</p>
</section>
<section id="output-5" class="level4">
<h4 class="anchored" data-anchor-id="output-5">Output</h4>
<p>The final output is like this:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb7-1">+------------+------------+-------------+</span>
<span id="cb7-2">| l_orderkey | l_shipdate | o_orderdate |</span>
<span id="cb7-3">+------------+------------+-------------+</span>
<span id="cb7-4">| 1          | 1994-06-01 | 1994-05-01  |</span>
<span id="cb7-5">+------------+------------+-------------+</span></code></pre></div>
</section>
<section id="execution-order" class="level3">
<h3 class="anchored" data-anchor-id="execution-order">Execution order</h3>
<p>The simplest execution model is <a href="https://justinjaffray.com/query-engines-push-vs.-pull/">pull-based execution</a>, which implements a <a href="https://www.freecodecamp.org/news/binary-search-tree-traversal-inorder-preorder-post-order-for-bst/">post-order traversal</a> of the physical plan. For a tree (like blow), we get a traversal order of <code>D -&gt; E -&gt; B -&gt; F -&gt; G -&gt; C -&gt; A</code>: <img src="https://blog.haoxp.xyz/posts/sql-to-results/f4.png" class="img-fluid"></p>
<p>Applying our physical graph above, we get an execution order of:</p>
<ol type="1">
<li><p><a href="https://docs.rs/datafusion/37.1.0/datafusion/datasource/physical_plan/struct.CsvExec.html"><code>CsvExec (orders.csv)</code></a></p></li>
<li><p><a href="https://docs.rs/datafusion/37.1.0/datafusion/physical_plan/repartition/struct.RepartitionExec.html"><code>RepartitionExec</code></a></p></li>
<li><p><a href="https://docs.rs/datafusion/37.1.0/datafusion/physical_plan/filter/struct.FilterExec.html"><code>FilterExec</code></a></p></li>
<li><p><a href="https://docs.rs/datafusion/37.1.0/datafusion/physical_plan/coalesce_batches/struct.CoalesceBatchesExec.html"><code>CoalesceBatchesExec</code></a></p></li>
<li><p><a href="https://docs.rs/datafusion/37.1.0/datafusion/physical_plan/repartition/struct.RepartitionExec.html"><code>RepartitionExec</code></a></p></li>
<li><p><a href="https://docs.rs/datafusion/37.1.0/datafusion/physical_plan/coalesce_batches/struct.CoalesceBatchesExec.html"><code>CoalesceBatchesExec</code></a></p></li>
<li><p><a href="https://docs.rs/datafusion/37.1.0/datafusion/datasource/physical_plan/struct.CsvExec.html"><code>CsvExec (lineitem.csv)</code></a></p></li>
<li><p><a href="https://docs.rs/datafusion/37.1.0/datafusion/physical_plan/repartition/struct.RepartitionExec.html"><code>RepartitionExec</code></a></p></li>
<li><p><a href="https://docs.rs/datafusion/37.1.0/datafusion/physical_plan/repartition/struct.RepartitionExec.html"><code>RepartitionExec</code></a></p></li>
<li><p><a href="https://docs.rs/datafusion/37.1.0/datafusion/physical_plan/coalesce_batches/struct.CoalesceBatchesExec.html"><code>CoalesceBatchesExec</code></a></p></li>
<li><p><a href="https://docs.rs/datafusion/37.1.0/datafusion/physical_plan/joins/struct.HashJoinExec.html"><code>HashJoinExec</code></a></p></li>
<li><p><a href="https://docs.rs/datafusion/37.1.0/datafusion/physical_plan/coalesce_batches/struct.CoalesceBatchesExec.html"><code>CoalesceBatchesExec</code></a></p></li>
<li><p><a href="https://docs.rs/datafusion/37.1.0/datafusion/physical_plan/projection/struct.ProjectionExec.html"><code>ProjectionExec</code></a></p></li>
</ol>
<p>The <code>RepartitionExec</code> and <code>CoalesceBatchesExec</code> are executors that partition the data for multi-thread processing (based on the <a href="https://w6113.github.io/files/papers/volcanoparallelism-89.pdf">Volcano execution</a> style).</p>
<p>A simplified, single-threaded, no-partitioned execution order would be:</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">graph LR;
    e1["CsvExec (orders.csv)"] --&gt; FilterExec
    FilterExec --&gt; e2 
    e2["CsvExec (lineitem.csv)"] --&gt; HashJoinExec
    HashJoinExec --&gt; ProjectionExec
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
</section>
<section id="reading-from-disk" class="level3">
<h3 class="anchored" data-anchor-id="reading-from-disk">Reading from disk</h3>
<p>CSV files are row-based, and we read them row by row, it is efficient when we frequently need to read the whole row. However, modern data analytic workloads do not always need to read the whole row; they often only need to read a subset of columns. In our example above, we only need to read <code>l_orderkey</code>, <code>l_shipdate</code>, <code>o_orderdate</code>, <code>o_orderkey</code> from the tables. If using a row-based file format (like CSV), we need to load all columns into memory, which is inefficient. Column-based file formats (like <a href="https://parquet.apache.org/">Apache Parquet</a>) can be more efficient in this case.</p>
<p>See the <a href="../../posts/parquet-to-arrow/">Parquet pruning in DataFusion</a> for more details.</p>


</section>
</section>

 ]]></description>
  <guid>https://blog.haoxp.xyz/posts/sql-to-results/</guid>
  <pubDate>Fri, 26 Apr 2024 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
